        -:    0:Source:utils.c
        -:    1:/*
        -:    2: * JMPXRDS, an FM MPX signal generator with RDS support on
        -:    3: * top of Jack Audio Connection Kit - General utilities
        -:    4: *
        -:    5: * Copyright (C) 2016 Nick Kossifidis <mickflemm@gmail.com>
        -:    6: *
        -:    7: * This program is free software: you can redistribute it and/or modify
        -:    8: * it under the terms of the GNU General Public License as published by
        -:    9: * the Free Software Foundation, either version 3 of the License, or
        -:   10: * (at your option) any later version.
        -:   11: *
        -:   12: * This program is distributed in the hope that it will be useful,
        -:   13: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   14: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   15: * GNU General Public License for more details.
        -:   16: *
        -:   17: * You should have received a copy of the GNU General Public License
        -:   18: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   19: */
        -:   20:
        -:   21:#include "utils.h"
        -:   22:#include <stdlib.h>	/* For malloc(), NULL etc */
        -:   23:#include <string.h>	/* For memset() */
        -:   24:#include <sys/mman.h>	/* For shm_open, mmap etc  */
        -:   25:#include <sys/stat.h>	/* For mode constants */
        -:   26:#include <fcntl.h>	/* For O_* constants */
        -:   27:#include <unistd.h>	/* For ftruncate() */
        -:   28:#include <stdarg.h>	/* For variable argument handling */
        -:   29:#include <stdio.h>	/* For v/printf() */
        -:   30:#include <errno.h>	/* For errno */
        -:   31:
        -:   32:/************************\
        -:   33:* SHARED MEMORY HANDLING *
        -:   34:\************************/
        -:   35:
        -:   36:struct shm_mapping*
       3*:   37:utils_shm_init(const char* name, int size)
        -:   38:{
       3*:   39:	int ret = 0;
       3*:   40:	struct shm_mapping* shmem = NULL;
        -:   41:
        -:   42:	shmem = (struct shm_mapping*)
       3*:   43:		malloc(sizeof(struct shm_mapping));
       3*:   44:	if(!shmem)
    #####:   45:		return NULL;
       3*:   46:	memset(shmem, 0, sizeof(struct shm_mapping));
       3*:   47:	shmem->name = name;
       3*:   48:	shmem->size = size;
        -:   49:
        -:   50:	/* Create the shm segment */
       3*:   51:	shmem->fd = shm_open(name, O_CREAT | O_EXCL | O_RDWR, 0600);
       3*:   52:	if (shmem->fd < 0)
    #####:   53:		goto cleanup;
        -:   54:
        -:   55:	/* Resize it */
       3*:   56:	ret = ftruncate(shmem->fd, size);
       3*:   57:	if (ret < 0)
    #####:   58:		goto cleanup;
        -:   59:
        -:   60:	/* mmap() it */
       3*:   61:	shmem->mem = mmap(0, size, PROT_READ | PROT_WRITE,
        -:   62:			  MAP_SHARED, shmem->fd, 0);
        -:   63:
       3*:   64: cleanup:
       3*:   65:	if(shmem->fd >= 0)
       3*:   66:		close(shmem->fd);
        -:   67:	else
    #####:   68:		return NULL;
        -:   69:
       3*:   70:	if (shmem->mem == MAP_FAILED) {
    #####:   71:		shm_unlink(name);
    #####:   72:		free(shmem);
    #####:   73:		shmem = NULL;
       3*:   74:	} else if (shmem->mem)
       3*:   75:		memset(shmem->mem, 0, shmem->size);
        -:   76:
       3*:   77:	return shmem;
        -:   78:}
------------------
utils_shm_init:
    #####:   37:utils_shm_init(const char* name, int size)
        -:   38:{
    #####:   39:	int ret = 0;
    #####:   40:	struct shm_mapping* shmem = NULL;
        -:   41:
        -:   42:	shmem = (struct shm_mapping*)
    #####:   43:		malloc(sizeof(struct shm_mapping));
    #####:   44:	if(!shmem)
    #####:   45:		return NULL;
    #####:   46:	memset(shmem, 0, sizeof(struct shm_mapping));
    #####:   47:	shmem->name = name;
    #####:   48:	shmem->size = size;
        -:   49:
        -:   50:	/* Create the shm segment */
    #####:   51:	shmem->fd = shm_open(name, O_CREAT | O_EXCL | O_RDWR, 0600);
    #####:   52:	if (shmem->fd < 0)
    #####:   53:		goto cleanup;
        -:   54:
        -:   55:	/* Resize it */
    #####:   56:	ret = ftruncate(shmem->fd, size);
    #####:   57:	if (ret < 0)
    #####:   58:		goto cleanup;
        -:   59:
        -:   60:	/* mmap() it */
    #####:   61:	shmem->mem = mmap(0, size, PROT_READ | PROT_WRITE,
        -:   62:			  MAP_SHARED, shmem->fd, 0);
        -:   63:
    #####:   64: cleanup:
    #####:   65:	if(shmem->fd >= 0)
    #####:   66:		close(shmem->fd);
        -:   67:	else
    #####:   68:		return NULL;
        -:   69:
    #####:   70:	if (shmem->mem == MAP_FAILED) {
    #####:   71:		shm_unlink(name);
    #####:   72:		free(shmem);
    #####:   73:		shmem = NULL;
    #####:   74:	} else if (shmem->mem)
    #####:   75:		memset(shmem->mem, 0, shmem->size);
        -:   76:
    #####:   77:	return shmem;
        -:   78:}
------------------
utils_shm_init:
    #####:   37:utils_shm_init(const char* name, int size)
        -:   38:{
    #####:   39:	int ret = 0;
    #####:   40:	struct shm_mapping* shmem = NULL;
        -:   41:
        -:   42:	shmem = (struct shm_mapping*)
    #####:   43:		malloc(sizeof(struct shm_mapping));
    #####:   44:	if(!shmem)
    #####:   45:		return NULL;
    #####:   46:	memset(shmem, 0, sizeof(struct shm_mapping));
    #####:   47:	shmem->name = name;
    #####:   48:	shmem->size = size;
        -:   49:
        -:   50:	/* Create the shm segment */
    #####:   51:	shmem->fd = shm_open(name, O_CREAT | O_EXCL | O_RDWR, 0600);
    #####:   52:	if (shmem->fd < 0)
    #####:   53:		goto cleanup;
        -:   54:
        -:   55:	/* Resize it */
    #####:   56:	ret = ftruncate(shmem->fd, size);
    #####:   57:	if (ret < 0)
    #####:   58:		goto cleanup;
        -:   59:
        -:   60:	/* mmap() it */
    #####:   61:	shmem->mem = mmap(0, size, PROT_READ | PROT_WRITE,
        -:   62:			  MAP_SHARED, shmem->fd, 0);
        -:   63:
    #####:   64: cleanup:
    #####:   65:	if(shmem->fd >= 0)
    #####:   66:		close(shmem->fd);
        -:   67:	else
    #####:   68:		return NULL;
        -:   69:
    #####:   70:	if (shmem->mem == MAP_FAILED) {
    #####:   71:		shm_unlink(name);
    #####:   72:		free(shmem);
    #####:   73:		shmem = NULL;
    #####:   74:	} else if (shmem->mem)
    #####:   75:		memset(shmem->mem, 0, shmem->size);
        -:   76:
    #####:   77:	return shmem;
        -:   78:}
------------------
utils_shm_init:
        3:   37:utils_shm_init(const char* name, int size)
        -:   38:{
        3:   39:	int ret = 0;
        3:   40:	struct shm_mapping* shmem = NULL;
        -:   41:
        -:   42:	shmem = (struct shm_mapping*)
        3:   43:		malloc(sizeof(struct shm_mapping));
        3:   44:	if(!shmem)
    #####:   45:		return NULL;
        3:   46:	memset(shmem, 0, sizeof(struct shm_mapping));
        3:   47:	shmem->name = name;
        3:   48:	shmem->size = size;
        -:   49:
        -:   50:	/* Create the shm segment */
        3:   51:	shmem->fd = shm_open(name, O_CREAT | O_EXCL | O_RDWR, 0600);
        3:   52:	if (shmem->fd < 0)
    #####:   53:		goto cleanup;
        -:   54:
        -:   55:	/* Resize it */
        3:   56:	ret = ftruncate(shmem->fd, size);
        3:   57:	if (ret < 0)
    #####:   58:		goto cleanup;
        -:   59:
        -:   60:	/* mmap() it */
        3:   61:	shmem->mem = mmap(0, size, PROT_READ | PROT_WRITE,
        -:   62:			  MAP_SHARED, shmem->fd, 0);
        -:   63:
        3:   64: cleanup:
        3:   65:	if(shmem->fd >= 0)
        3:   66:		close(shmem->fd);
        -:   67:	else
    #####:   68:		return NULL;
        -:   69:
        3:   70:	if (shmem->mem == MAP_FAILED) {
    #####:   71:		shm_unlink(name);
    #####:   72:		free(shmem);
    #####:   73:		shmem = NULL;
        3:   74:	} else if (shmem->mem)
        3:   75:		memset(shmem->mem, 0, shmem->size);
        -:   76:
        3:   77:	return shmem;
        -:   78:}
------------------
utils_shm_init:
    #####:   37:utils_shm_init(const char* name, int size)
        -:   38:{
    #####:   39:	int ret = 0;
    #####:   40:	struct shm_mapping* shmem = NULL;
        -:   41:
        -:   42:	shmem = (struct shm_mapping*)
    #####:   43:		malloc(sizeof(struct shm_mapping));
    #####:   44:	if(!shmem)
    #####:   45:		return NULL;
    #####:   46:	memset(shmem, 0, sizeof(struct shm_mapping));
    #####:   47:	shmem->name = name;
    #####:   48:	shmem->size = size;
        -:   49:
        -:   50:	/* Create the shm segment */
    #####:   51:	shmem->fd = shm_open(name, O_CREAT | O_EXCL | O_RDWR, 0600);
    #####:   52:	if (shmem->fd < 0)
    #####:   53:		goto cleanup;
        -:   54:
        -:   55:	/* Resize it */
    #####:   56:	ret = ftruncate(shmem->fd, size);
    #####:   57:	if (ret < 0)
    #####:   58:		goto cleanup;
        -:   59:
        -:   60:	/* mmap() it */
    #####:   61:	shmem->mem = mmap(0, size, PROT_READ | PROT_WRITE,
        -:   62:			  MAP_SHARED, shmem->fd, 0);
        -:   63:
    #####:   64: cleanup:
    #####:   65:	if(shmem->fd >= 0)
    #####:   66:		close(shmem->fd);
        -:   67:	else
    #####:   68:		return NULL;
        -:   69:
    #####:   70:	if (shmem->mem == MAP_FAILED) {
    #####:   71:		shm_unlink(name);
    #####:   72:		free(shmem);
    #####:   73:		shmem = NULL;
    #####:   74:	} else if (shmem->mem)
    #####:   75:		memset(shmem->mem, 0, shmem->size);
        -:   76:
    #####:   77:	return shmem;
        -:   78:}
------------------
utils_shm_init:
    #####:   37:utils_shm_init(const char* name, int size)
        -:   38:{
    #####:   39:	int ret = 0;
    #####:   40:	struct shm_mapping* shmem = NULL;
        -:   41:
        -:   42:	shmem = (struct shm_mapping*)
    #####:   43:		malloc(sizeof(struct shm_mapping));
    #####:   44:	if(!shmem)
    #####:   45:		return NULL;
    #####:   46:	memset(shmem, 0, sizeof(struct shm_mapping));
    #####:   47:	shmem->name = name;
    #####:   48:	shmem->size = size;
        -:   49:
        -:   50:	/* Create the shm segment */
    #####:   51:	shmem->fd = shm_open(name, O_CREAT | O_EXCL | O_RDWR, 0600);
    #####:   52:	if (shmem->fd < 0)
    #####:   53:		goto cleanup;
        -:   54:
        -:   55:	/* Resize it */
    #####:   56:	ret = ftruncate(shmem->fd, size);
    #####:   57:	if (ret < 0)
    #####:   58:		goto cleanup;
        -:   59:
        -:   60:	/* mmap() it */
    #####:   61:	shmem->mem = mmap(0, size, PROT_READ | PROT_WRITE,
        -:   62:			  MAP_SHARED, shmem->fd, 0);
        -:   63:
    #####:   64: cleanup:
    #####:   65:	if(shmem->fd >= 0)
    #####:   66:		close(shmem->fd);
        -:   67:	else
    #####:   68:		return NULL;
        -:   69:
    #####:   70:	if (shmem->mem == MAP_FAILED) {
    #####:   71:		shm_unlink(name);
    #####:   72:		free(shmem);
    #####:   73:		shmem = NULL;
    #####:   74:	} else if (shmem->mem)
    #####:   75:		memset(shmem->mem, 0, shmem->size);
        -:   76:
    #####:   77:	return shmem;
        -:   78:}
------------------
        -:   79:
        -:   80:struct shm_mapping*
       19:   81:utils_shm_attach(const char* name, int size)
        -:   82:{
       19:   83:	struct shm_mapping* shmem = NULL;
        -:   84:
        -:   85:	shmem = (struct shm_mapping*)
       19:   86:		malloc(sizeof(struct shm_mapping));
       19:   87:	if(!shmem)
    #####:   88:		return NULL;
       19:   89:	memset(shmem, 0, sizeof(struct shm_mapping));
       19:   90:	shmem->name = name;
       19:   91:	shmem->size = size;
        -:   92:
        -:   93:	/* Open the shm segment */
       19:   94:	shmem->fd = shm_open(name, O_RDWR, 0600);
       19:   95:	if (shmem->fd < 0)
    #####:   96:		goto cleanup;
        -:   97:
        -:   98:	/* mmap() it */
       19:   99:	shmem->mem = mmap(0, size, PROT_READ | PROT_WRITE,
        -:  100:			  MAP_SHARED, shmem->fd, 0);
        -:  101:
       19:  102: cleanup:
       19:  103:	if(shmem->fd >= 0)
       19:  104:		close(shmem->fd);
        -:  105:	else {
    #####:  106:		free(shmem);
    #####:  107:		shmem = NULL;
        -:  108:	}
        -:  109:
       19:  110:	if (shmem && shmem->mem == MAP_FAILED) {
    #####:  111:		shm_unlink(name);
    #####:  112:		free(shmem);
    #####:  113:		shmem = NULL;
        -:  114:	}
        -:  115:
       19:  116:	return shmem;
        -:  117:}
------------------
utils_shm_attach:
        3:   81:utils_shm_attach(const char* name, int size)
        -:   82:{
        3:   83:	struct shm_mapping* shmem = NULL;
        -:   84:
        -:   85:	shmem = (struct shm_mapping*)
        3:   86:		malloc(sizeof(struct shm_mapping));
        3:   87:	if(!shmem)
    #####:   88:		return NULL;
        3:   89:	memset(shmem, 0, sizeof(struct shm_mapping));
        3:   90:	shmem->name = name;
        3:   91:	shmem->size = size;
        -:   92:
        -:   93:	/* Open the shm segment */
        3:   94:	shmem->fd = shm_open(name, O_RDWR, 0600);
        3:   95:	if (shmem->fd < 0)
    #####:   96:		goto cleanup;
        -:   97:
        -:   98:	/* mmap() it */
        3:   99:	shmem->mem = mmap(0, size, PROT_READ | PROT_WRITE,
        -:  100:			  MAP_SHARED, shmem->fd, 0);
        -:  101:
        3:  102: cleanup:
        3:  103:	if(shmem->fd >= 0)
        3:  104:		close(shmem->fd);
        -:  105:	else {
    #####:  106:		free(shmem);
    #####:  107:		shmem = NULL;
        -:  108:	}
        -:  109:
        3:  110:	if (shmem && shmem->mem == MAP_FAILED) {
    #####:  111:		shm_unlink(name);
    #####:  112:		free(shmem);
    #####:  113:		shmem = NULL;
        -:  114:	}
        -:  115:
        3:  116:	return shmem;
        -:  117:}
------------------
utils_shm_attach:
        3:   81:utils_shm_attach(const char* name, int size)
        -:   82:{
        3:   83:	struct shm_mapping* shmem = NULL;
        -:   84:
        -:   85:	shmem = (struct shm_mapping*)
        3:   86:		malloc(sizeof(struct shm_mapping));
        3:   87:	if(!shmem)
    #####:   88:		return NULL;
        3:   89:	memset(shmem, 0, sizeof(struct shm_mapping));
        3:   90:	shmem->name = name;
        3:   91:	shmem->size = size;
        -:   92:
        -:   93:	/* Open the shm segment */
        3:   94:	shmem->fd = shm_open(name, O_RDWR, 0600);
        3:   95:	if (shmem->fd < 0)
    #####:   96:		goto cleanup;
        -:   97:
        -:   98:	/* mmap() it */
        3:   99:	shmem->mem = mmap(0, size, PROT_READ | PROT_WRITE,
        -:  100:			  MAP_SHARED, shmem->fd, 0);
        -:  101:
        3:  102: cleanup:
        3:  103:	if(shmem->fd >= 0)
        3:  104:		close(shmem->fd);
        -:  105:	else {
    #####:  106:		free(shmem);
    #####:  107:		shmem = NULL;
        -:  108:	}
        -:  109:
        3:  110:	if (shmem && shmem->mem == MAP_FAILED) {
    #####:  111:		shm_unlink(name);
    #####:  112:		free(shmem);
    #####:  113:		shmem = NULL;
        -:  114:	}
        -:  115:
        3:  116:	return shmem;
        -:  117:}
------------------
utils_shm_attach:
        5:   81:utils_shm_attach(const char* name, int size)
        -:   82:{
        5:   83:	struct shm_mapping* shmem = NULL;
        -:   84:
        -:   85:	shmem = (struct shm_mapping*)
        5:   86:		malloc(sizeof(struct shm_mapping));
        5:   87:	if(!shmem)
    #####:   88:		return NULL;
        5:   89:	memset(shmem, 0, sizeof(struct shm_mapping));
        5:   90:	shmem->name = name;
        5:   91:	shmem->size = size;
        -:   92:
        -:   93:	/* Open the shm segment */
        5:   94:	shmem->fd = shm_open(name, O_RDWR, 0600);
        5:   95:	if (shmem->fd < 0)
    #####:   96:		goto cleanup;
        -:   97:
        -:   98:	/* mmap() it */
        5:   99:	shmem->mem = mmap(0, size, PROT_READ | PROT_WRITE,
        -:  100:			  MAP_SHARED, shmem->fd, 0);
        -:  101:
        5:  102: cleanup:
        5:  103:	if(shmem->fd >= 0)
        5:  104:		close(shmem->fd);
        -:  105:	else {
    #####:  106:		free(shmem);
    #####:  107:		shmem = NULL;
        -:  108:	}
        -:  109:
        5:  110:	if (shmem && shmem->mem == MAP_FAILED) {
    #####:  111:		shm_unlink(name);
    #####:  112:		free(shmem);
    #####:  113:		shmem = NULL;
        -:  114:	}
        -:  115:
        5:  116:	return shmem;
        -:  117:}
------------------
utils_shm_attach:
        3:   81:utils_shm_attach(const char* name, int size)
        -:   82:{
        3:   83:	struct shm_mapping* shmem = NULL;
        -:   84:
        -:   85:	shmem = (struct shm_mapping*)
        3:   86:		malloc(sizeof(struct shm_mapping));
        3:   87:	if(!shmem)
    #####:   88:		return NULL;
        3:   89:	memset(shmem, 0, sizeof(struct shm_mapping));
        3:   90:	shmem->name = name;
        3:   91:	shmem->size = size;
        -:   92:
        -:   93:	/* Open the shm segment */
        3:   94:	shmem->fd = shm_open(name, O_RDWR, 0600);
        3:   95:	if (shmem->fd < 0)
    #####:   96:		goto cleanup;
        -:   97:
        -:   98:	/* mmap() it */
        3:   99:	shmem->mem = mmap(0, size, PROT_READ | PROT_WRITE,
        -:  100:			  MAP_SHARED, shmem->fd, 0);
        -:  101:
        3:  102: cleanup:
        3:  103:	if(shmem->fd >= 0)
        3:  104:		close(shmem->fd);
        -:  105:	else {
    #####:  106:		free(shmem);
    #####:  107:		shmem = NULL;
        -:  108:	}
        -:  109:
        3:  110:	if (shmem && shmem->mem == MAP_FAILED) {
    #####:  111:		shm_unlink(name);
    #####:  112:		free(shmem);
    #####:  113:		shmem = NULL;
        -:  114:	}
        -:  115:
        3:  116:	return shmem;
        -:  117:}
------------------
utils_shm_attach:
        5:   81:utils_shm_attach(const char* name, int size)
        -:   82:{
        5:   83:	struct shm_mapping* shmem = NULL;
        -:   84:
        -:   85:	shmem = (struct shm_mapping*)
        5:   86:		malloc(sizeof(struct shm_mapping));
        5:   87:	if(!shmem)
    #####:   88:		return NULL;
        5:   89:	memset(shmem, 0, sizeof(struct shm_mapping));
        5:   90:	shmem->name = name;
        5:   91:	shmem->size = size;
        -:   92:
        -:   93:	/* Open the shm segment */
        5:   94:	shmem->fd = shm_open(name, O_RDWR, 0600);
        5:   95:	if (shmem->fd < 0)
    #####:   96:		goto cleanup;
        -:   97:
        -:   98:	/* mmap() it */
        5:   99:	shmem->mem = mmap(0, size, PROT_READ | PROT_WRITE,
        -:  100:			  MAP_SHARED, shmem->fd, 0);
        -:  101:
        5:  102: cleanup:
        5:  103:	if(shmem->fd >= 0)
        5:  104:		close(shmem->fd);
        -:  105:	else {
    #####:  106:		free(shmem);
    #####:  107:		shmem = NULL;
        -:  108:	}
        -:  109:
        5:  110:	if (shmem && shmem->mem == MAP_FAILED) {
    #####:  111:		shm_unlink(name);
    #####:  112:		free(shmem);
    #####:  113:		shmem = NULL;
        -:  114:	}
        -:  115:
        5:  116:	return shmem;
        -:  117:}
------------------
        -:  118:
        -:  119:void
       22:  120:utils_shm_destroy(struct shm_mapping* shmem, int unlink)
        -:  121:{
       22:  122:	if(!shmem)
    #####:  123:		return;
        -:  124:
       22:  125:	munmap(shmem->mem, shmem->size);
        -:  126:
       22:  127:	if(unlink)
       3*:  128:		shm_unlink(shmem->name);
        -:  129:
       22:  130:	free(shmem);
        -:  131:}
------------------
utils_shm_destroy:
        3:  120:utils_shm_destroy(struct shm_mapping* shmem, int unlink)
        -:  121:{
        3:  122:	if(!shmem)
    #####:  123:		return;
        -:  124:
        3:  125:	munmap(shmem->mem, shmem->size);
        -:  126:
        3:  127:	if(unlink)
    #####:  128:		shm_unlink(shmem->name);
        -:  129:
        3:  130:	free(shmem);
        -:  131:}
------------------
utils_shm_destroy:
        3:  120:utils_shm_destroy(struct shm_mapping* shmem, int unlink)
        -:  121:{
        3:  122:	if(!shmem)
    #####:  123:		return;
        -:  124:
        3:  125:	munmap(shmem->mem, shmem->size);
        -:  126:
        3:  127:	if(unlink)
    #####:  128:		shm_unlink(shmem->name);
        -:  129:
        3:  130:	free(shmem);
        -:  131:}
------------------
utils_shm_destroy:
        8:  120:utils_shm_destroy(struct shm_mapping* shmem, int unlink)
        -:  121:{
        8:  122:	if(!shmem)
    #####:  123:		return;
        -:  124:
        8:  125:	munmap(shmem->mem, shmem->size);
        -:  126:
        8:  127:	if(unlink)
        3:  128:		shm_unlink(shmem->name);
        -:  129:
        8:  130:	free(shmem);
        -:  131:}
------------------
utils_shm_destroy:
        3:  120:utils_shm_destroy(struct shm_mapping* shmem, int unlink)
        -:  121:{
        3:  122:	if(!shmem)
    #####:  123:		return;
        -:  124:
        3:  125:	munmap(shmem->mem, shmem->size);
        -:  126:
        3:  127:	if(unlink)
    #####:  128:		shm_unlink(shmem->name);
        -:  129:
        3:  130:	free(shmem);
        -:  131:}
------------------
utils_shm_destroy:
        5:  120:utils_shm_destroy(struct shm_mapping* shmem, int unlink)
        -:  121:{
        5:  122:	if(!shmem)
    #####:  123:		return;
        -:  124:
        5:  125:	munmap(shmem->mem, shmem->size);
        -:  126:
        5:  127:	if(unlink)
    #####:  128:		shm_unlink(shmem->name);
        -:  129:
        5:  130:	free(shmem);
        -:  131:}
------------------
        -:  132:
        -:  133:void
    #####:  134:utils_shm_unlink_all()
        -:  135:{
    #####:  136:	shm_unlink(FMMOD_CTL_SHM_NAME);
    #####:  137:	shm_unlink(RDS_ENC_SHM_NAME);
    #####:  138:	shm_unlink(RTP_SRV_SHM_NAME);
    #####:  139:}
------------------
utils_shm_unlink_all:
    #####:  134:utils_shm_unlink_all()
        -:  135:{
    #####:  136:	shm_unlink(FMMOD_CTL_SHM_NAME);
    #####:  137:	shm_unlink(RDS_ENC_SHM_NAME);
    #####:  138:	shm_unlink(RTP_SRV_SHM_NAME);
    #####:  139:}
------------------
utils_shm_unlink_all:
    #####:  134:utils_shm_unlink_all()
        -:  135:{
    #####:  136:	shm_unlink(FMMOD_CTL_SHM_NAME);
    #####:  137:	shm_unlink(RDS_ENC_SHM_NAME);
    #####:  138:	shm_unlink(RTP_SRV_SHM_NAME);
    #####:  139:}
------------------
utils_shm_unlink_all:
    #####:  134:utils_shm_unlink_all()
        -:  135:{
    #####:  136:	shm_unlink(FMMOD_CTL_SHM_NAME);
    #####:  137:	shm_unlink(RDS_ENC_SHM_NAME);
    #####:  138:	shm_unlink(RTP_SRV_SHM_NAME);
    #####:  139:}
------------------
utils_shm_unlink_all:
    #####:  134:utils_shm_unlink_all()
        -:  135:{
    #####:  136:	shm_unlink(FMMOD_CTL_SHM_NAME);
    #####:  137:	shm_unlink(RDS_ENC_SHM_NAME);
    #####:  138:	shm_unlink(RTP_SRV_SHM_NAME);
    #####:  139:}
------------------
utils_shm_unlink_all:
    #####:  134:utils_shm_unlink_all()
        -:  135:{
    #####:  136:	shm_unlink(FMMOD_CTL_SHM_NAME);
    #####:  137:	shm_unlink(RDS_ENC_SHM_NAME);
    #####:  138:	shm_unlink(RTP_SRV_SHM_NAME);
    #####:  139:}
------------------
        -:  140:
        -:  141:
        -:  142:/****************\
        -:  143:* CONSOLE OUTPUT *
        -:  144:\****************/
        -:  145:
        -:  146:/* Some codes for prety output on the terminal */
        -:  147:#define NORMAL	"\x1B[0m"
        -:  148:#define	BRIGHT	"\x1B[1m"
        -:  149:#define	DIM	"\x1B[2m"
        -:  150:#define RED	"\x1B[31m"
        -:  151:#define GREEN	"\x1B[32m"
        -:  152:#define YELLOW	"\x1B[33m"
        -:  153:#define BLUE	"\x1B[34m"
        -:  154:#define MAGENTA	"\x1B[35m"
        -:  155:#define CYAN	"\x1B[36m"
        -:  156:#define WHITE	"\x1B[37m"
        -:  157:
        -:  158:void
       4*:  159:utils_ann(const char* msg)
        -:  160:{
       4*:  161:	printf(GREEN);
       4*:  162:	printf("%s", msg);
       4*:  163:	printf(NORMAL);
       4*:  164:}
------------------
utils_ann:
        1:  159:utils_ann(const char* msg)
        -:  160:{
        1:  161:	printf(GREEN);
        1:  162:	printf("%s", msg);
        1:  163:	printf(NORMAL);
        1:  164:}
------------------
utils_ann:
    #####:  159:utils_ann(const char* msg)
        -:  160:{
    #####:  161:	printf(GREEN);
    #####:  162:	printf("%s", msg);
    #####:  163:	printf(NORMAL);
    #####:  164:}
------------------
utils_ann:
        1:  159:utils_ann(const char* msg)
        -:  160:{
        1:  161:	printf(GREEN);
        1:  162:	printf("%s", msg);
        1:  163:	printf(NORMAL);
        1:  164:}
------------------
utils_ann:
        1:  159:utils_ann(const char* msg)
        -:  160:{
        1:  161:	printf(GREEN);
        1:  162:	printf("%s", msg);
        1:  163:	printf(NORMAL);
        1:  164:}
------------------
utils_ann:
        1:  159:utils_ann(const char* msg)
        -:  160:{
        1:  161:	printf(GREEN);
        1:  162:	printf("%s", msg);
        1:  163:	printf(NORMAL);
        1:  164:}
------------------
        -:  165:
        -:  166:void
      29*:  167:utils_info(const char* fmt,...)
        -:  168:{
        -:  169:	va_list args;
        -:  170:
      29*:  171:	printf(CYAN);
      29*:  172:	va_start(args, fmt);
      29*:  173:	vprintf(fmt, args);
      29*:  174:	va_end(args);
      29*:  175:	printf(NORMAL);
      29*:  176:}
------------------
utils_info:
       11:  167:utils_info(const char* fmt,...)
        -:  168:{
        -:  169:	va_list args;
        -:  170:
       11:  171:	printf(CYAN);
       11:  172:	va_start(args, fmt);
       11:  173:	vprintf(fmt, args);
       11:  174:	va_end(args);
       11:  175:	printf(NORMAL);
       11:  176:}
------------------
utils_info:
    #####:  167:utils_info(const char* fmt,...)
        -:  168:{
        -:  169:	va_list args;
        -:  170:
    #####:  171:	printf(CYAN);
    #####:  172:	va_start(args, fmt);
    #####:  173:	vprintf(fmt, args);
    #####:  174:	va_end(args);
    #####:  175:	printf(NORMAL);
    #####:  176:}
------------------
utils_info:
    #####:  167:utils_info(const char* fmt,...)
        -:  168:{
        -:  169:	va_list args;
        -:  170:
    #####:  171:	printf(CYAN);
    #####:  172:	va_start(args, fmt);
    #####:  173:	vprintf(fmt, args);
    #####:  174:	va_end(args);
    #####:  175:	printf(NORMAL);
    #####:  176:}
------------------
utils_info:
       13:  167:utils_info(const char* fmt,...)
        -:  168:{
        -:  169:	va_list args;
        -:  170:
       13:  171:	printf(CYAN);
       13:  172:	va_start(args, fmt);
       13:  173:	vprintf(fmt, args);
       13:  174:	va_end(args);
       13:  175:	printf(NORMAL);
       13:  176:}
------------------
utils_info:
        5:  167:utils_info(const char* fmt,...)
        -:  168:{
        -:  169:	va_list args;
        -:  170:
        5:  171:	printf(CYAN);
        5:  172:	va_start(args, fmt);
        5:  173:	vprintf(fmt, args);
        5:  174:	va_end(args);
        5:  175:	printf(NORMAL);
        5:  176:}
------------------
        -:  177:
        -:  178:void
       1*:  179:utils_wrn(const char* fmt,...)
        -:  180:{
        -:  181:	va_list args;
        -:  182:
       1*:  183:	fprintf(stderr, YELLOW);
       1*:  184:	va_start(args, fmt);
       1*:  185:	vfprintf(stderr, fmt, args);
       1*:  186:	va_end(args);
       1*:  187:	fprintf(stderr, NORMAL);
       1*:  188:}
------------------
utils_wrn:
    #####:  179:utils_wrn(const char* fmt,...)
        -:  180:{
        -:  181:	va_list args;
        -:  182:
    #####:  183:	fprintf(stderr, YELLOW);
    #####:  184:	va_start(args, fmt);
    #####:  185:	vfprintf(stderr, fmt, args);
    #####:  186:	va_end(args);
    #####:  187:	fprintf(stderr, NORMAL);
    #####:  188:}
------------------
utils_wrn:
        1:  179:utils_wrn(const char* fmt,...)
        -:  180:{
        -:  181:	va_list args;
        -:  182:
        1:  183:	fprintf(stderr, YELLOW);
        1:  184:	va_start(args, fmt);
        1:  185:	vfprintf(stderr, fmt, args);
        1:  186:	va_end(args);
        1:  187:	fprintf(stderr, NORMAL);
        1:  188:}
------------------
utils_wrn:
    #####:  179:utils_wrn(const char* fmt,...)
        -:  180:{
        -:  181:	va_list args;
        -:  182:
    #####:  183:	fprintf(stderr, YELLOW);
    #####:  184:	va_start(args, fmt);
    #####:  185:	vfprintf(stderr, fmt, args);
    #####:  186:	va_end(args);
    #####:  187:	fprintf(stderr, NORMAL);
    #####:  188:}
------------------
utils_wrn:
    #####:  179:utils_wrn(const char* fmt,...)
        -:  180:{
        -:  181:	va_list args;
        -:  182:
    #####:  183:	fprintf(stderr, YELLOW);
    #####:  184:	va_start(args, fmt);
    #####:  185:	vfprintf(stderr, fmt, args);
    #####:  186:	va_end(args);
    #####:  187:	fprintf(stderr, NORMAL);
    #####:  188:}
------------------
utils_wrn:
    #####:  179:utils_wrn(const char* fmt,...)
        -:  180:{
        -:  181:	va_list args;
        -:  182:
    #####:  183:	fprintf(stderr, YELLOW);
    #####:  184:	va_start(args, fmt);
    #####:  185:	vfprintf(stderr, fmt, args);
    #####:  186:	va_end(args);
    #####:  187:	fprintf(stderr, NORMAL);
    #####:  188:}
------------------
        -:  189:
        -:  190:void
    #####:  191:utils_err(const char* fmt,...)
        -:  192:{
        -:  193:	va_list args;
        -:  194:
    #####:  195:	fprintf(stderr, RED);
    #####:  196:	va_start(args, fmt);
    #####:  197:	vfprintf(stderr, fmt, args);
    #####:  198:	va_end(args);
    #####:  199:	fprintf(stderr, NORMAL);
    #####:  200:}
------------------
utils_err:
    #####:  191:utils_err(const char* fmt,...)
        -:  192:{
        -:  193:	va_list args;
        -:  194:
    #####:  195:	fprintf(stderr, RED);
    #####:  196:	va_start(args, fmt);
    #####:  197:	vfprintf(stderr, fmt, args);
    #####:  198:	va_end(args);
    #####:  199:	fprintf(stderr, NORMAL);
    #####:  200:}
------------------
utils_err:
    #####:  191:utils_err(const char* fmt,...)
        -:  192:{
        -:  193:	va_list args;
        -:  194:
    #####:  195:	fprintf(stderr, RED);
    #####:  196:	va_start(args, fmt);
    #####:  197:	vfprintf(stderr, fmt, args);
    #####:  198:	va_end(args);
    #####:  199:	fprintf(stderr, NORMAL);
    #####:  200:}
------------------
utils_err:
    #####:  191:utils_err(const char* fmt,...)
        -:  192:{
        -:  193:	va_list args;
        -:  194:
    #####:  195:	fprintf(stderr, RED);
    #####:  196:	va_start(args, fmt);
    #####:  197:	vfprintf(stderr, fmt, args);
    #####:  198:	va_end(args);
    #####:  199:	fprintf(stderr, NORMAL);
    #####:  200:}
------------------
utils_err:
    #####:  191:utils_err(const char* fmt,...)
        -:  192:{
        -:  193:	va_list args;
        -:  194:
    #####:  195:	fprintf(stderr, RED);
    #####:  196:	va_start(args, fmt);
    #####:  197:	vfprintf(stderr, fmt, args);
    #####:  198:	va_end(args);
    #####:  199:	fprintf(stderr, NORMAL);
    #####:  200:}
------------------
utils_err:
    #####:  191:utils_err(const char* fmt,...)
        -:  192:{
        -:  193:	va_list args;
        -:  194:
    #####:  195:	fprintf(stderr, RED);
    #####:  196:	va_start(args, fmt);
    #####:  197:	vfprintf(stderr, fmt, args);
    #####:  198:	va_end(args);
    #####:  199:	fprintf(stderr, NORMAL);
    #####:  200:}
------------------
        -:  201:
        -:  202:void
       1*:  203:utils_perr(const char* msg)
        -:  204:{
       1*:  205:	fprintf(stderr, RED);
       1*:  206:	fprintf(stderr, "%s: %s\n", msg, strerror(errno));
       1*:  207:	fprintf(stderr, NORMAL);
       1*:  208:}
------------------
utils_perr:
    #####:  203:utils_perr(const char* msg)
        -:  204:{
    #####:  205:	fprintf(stderr, RED);
    #####:  206:	fprintf(stderr, "%s: %s\n", msg, strerror(errno));
    #####:  207:	fprintf(stderr, NORMAL);
    #####:  208:}
------------------
utils_perr:
        1:  203:utils_perr(const char* msg)
        -:  204:{
        1:  205:	fprintf(stderr, RED);
        1:  206:	fprintf(stderr, "%s: %s\n", msg, strerror(errno));
        1:  207:	fprintf(stderr, NORMAL);
        1:  208:}
------------------
utils_perr:
    #####:  203:utils_perr(const char* msg)
        -:  204:{
    #####:  205:	fprintf(stderr, RED);
    #####:  206:	fprintf(stderr, "%s: %s\n", msg, strerror(errno));
    #####:  207:	fprintf(stderr, NORMAL);
    #####:  208:}
------------------
utils_perr:
    #####:  203:utils_perr(const char* msg)
        -:  204:{
    #####:  205:	fprintf(stderr, RED);
    #####:  206:	fprintf(stderr, "%s: %s\n", msg, strerror(errno));
    #####:  207:	fprintf(stderr, NORMAL);
    #####:  208:}
------------------
utils_perr:
    #####:  203:utils_perr(const char* msg)
        -:  204:{
    #####:  205:	fprintf(stderr, RED);
    #####:  206:	fprintf(stderr, "%s: %s\n", msg, strerror(errno));
    #####:  207:	fprintf(stderr, NORMAL);
    #####:  208:}
------------------
        -:  209:
        -:  210:#ifdef DEBUG
        -:  211:void
        -:  212:utils_dbg(const char* fmt,...)
        -:  213:{
        -:  214:	va_list args;
        -:  215:
        -:  216:	fprintf(stderr, MAGENTA);
        -:  217:	va_start(args, fmt);
        -:  218:	vfprintf(stderr, fmt, args);
        -:  219:	va_end(args);
        -:  220:	fprintf(stderr, NORMAL);
        -:  221:}
        -:  222:
        -:  223:void
        -:  224:utils_trace(const char* fmt,...)
        -:  225:{
        -:  226:	va_list args;
        -:  227:
        -:  228:	fprintf(stderr, YELLOW);
        -:  229:	va_start(args, fmt);
        -:  230:	vfprintf(stderr, fmt, args);
        -:  231:	va_end(args);
        -:  232:	fprintf(stderr, NORMAL);
        -:  233:}
        -:  234:#else
        -:  235:void
      55*:  236:utils_dbg(__attribute__((unused)) const char* fmt,...) {}
------------------
utils_dbg:
    #####:  236:utils_dbg(__attribute__((unused)) const char* fmt,...) {}
------------------
utils_dbg:
       34:  236:utils_dbg(__attribute__((unused)) const char* fmt,...) {}
------------------
utils_dbg:
       13:  236:utils_dbg(__attribute__((unused)) const char* fmt,...) {}
------------------
utils_dbg:
        8:  236:utils_dbg(__attribute__((unused)) const char* fmt,...) {}
------------------
utils_dbg:
    #####:  236:utils_dbg(__attribute__((unused)) const char* fmt,...) {}
------------------
        -:  237:void
    #####:  238:utils_trace(__attribute__((unused)) const char* fmt,...) {}
------------------
utils_trace:
    #####:  238:utils_trace(__attribute__((unused)) const char* fmt,...) {}
------------------
utils_trace:
    #####:  238:utils_trace(__attribute__((unused)) const char* fmt,...) {}
------------------
utils_trace:
    #####:  238:utils_trace(__attribute__((unused)) const char* fmt,...) {}
------------------
utils_trace:
    #####:  238:utils_trace(__attribute__((unused)) const char* fmt,...) {}
------------------
utils_trace:
    #####:  238:utils_trace(__attribute__((unused)) const char* fmt,...) {}
------------------
        -:  239:#endif
