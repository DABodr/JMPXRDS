        -:    0:Source:gui/jmrg_file_chooser.c
        -:    1:#include <stdlib.h>		/* For strtol() */
        -:    2:#include "jmpxrds_gui.h"
        -:    3:#include <linux/limits.h>	/* For PATH_MAX */
        -:    4:#include <string.h>		/* For strncmp() */
        -:    5:
        -:    6:/*****************\
        -:    7:* SIGNAL HANDLERS *
        -:    8:\*****************/
        -:    9:
        -:   10:static void
        4:   11:jmrg_file_chooser_done(GtkWidget *button, gpointer data)
        -:   12:{
        4:   13:	struct value_map *vmap = (struct value_map*) data;
        4:   14:	const char *filepath = NULL;
        -:   15:
        4:   16:	filepath = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(button));
        -:   17:
        4:   18:	switch(vmap->type) {
        3:   19:	case RDS_FIELD_PS:
        3:   20:		if((&vmap->dps)->active)
        1:   21:			rds_dynps_destroy(&vmap->dps);
        3:   22:		if(!filepath)
        1:   23:			return;
        2:   24:		rds_dynps_init(&vmap->dps, vmap->st, filepath);
        2:   25:		break;
        1:   26:	case RDS_FIELD_RT:
        1:   27:		if((&vmap->drt)->active)
    #####:   28:			rds_dynrt_destroy(&vmap->drt);
        1:   29:		if(!filepath)
    #####:   30:			return;
        1:   31:		rds_dynrt_init(&vmap->drt, vmap->st, filepath);
        1:   32:		break;
    #####:   33:	default:
    #####:   34:		return;
        -:   35:	}
        -:   36:
        -:   37:
        3:   38:	if(gtk_switch_get_state(GTK_SWITCH(vmap->sw)) == FALSE)
        3:   39:		gtk_switch_set_state(GTK_SWITCH(vmap->sw), TRUE);
        -:   40:
        3:   41:	return;
        -:   42:}
        -:   43:
        -:   44:static gboolean
        4:   45:jmrg_file_chooser_swtoggle(GtkSwitch *widget, gboolean state, gpointer data)
        -:   46:{
        4:   47:	struct value_map *vmap = (struct value_map*) data;
        4:   48:	GtkWidget *parent = gtk_widget_get_parent(GTK_WIDGET(widget));
        4:   49:	GList *children = gtk_container_get_children(GTK_CONTAINER(parent));
        4:   50:	GtkWidget *file_chooser = GTK_WIDGET(g_list_nth_data(children, 1));
        4:   51:	int active = 0;
        -:   52:
        4:   53:	switch(vmap->type) {
        3:   54:	case RDS_FIELD_PS:
        3:   55:		active = (&vmap->dps)->active;
        3:   56:		break;
        1:   57:	case RDS_FIELD_RT:
        1:   58:		active = (&vmap->drt)->active;
        1:   59:		break;
    #####:   60:	default:
    #####:   61:		return FALSE;
        -:   62:	}
        -:   63:
        4:   64:	if(state) {
        3:   65:		if(active)
        2:   66:			return FALSE;
        -:   67:
        1:   68:		if(vmap->type == RDS_FIELD_PS && (&vmap->dps)->filepath)
        1:   69:			gtk_file_chooser_select_filename(GTK_FILE_CHOOSER(file_chooser),
        -:   70:							 (&vmap->dps)->filepath);
    #####:   71:		else if(vmap->type == RDS_FIELD_RT && (&vmap->drt)->filepath)
    #####:   72:			gtk_file_chooser_select_filename(GTK_FILE_CHOOSER(file_chooser),
        -:   73:							 (&vmap->drt)->filepath);
        -:   74:		else {
    #####:   75:			gtk_switch_set_state(widget, FALSE);
    #####:   76:			return FALSE;
        -:   77:		}
        -:   78:	} else {
        1:   79:		if(!active)
    #####:   80:			return FALSE;
        1:   81:		gtk_file_chooser_unselect_all(GTK_FILE_CHOOSER(file_chooser));
        -:   82:	}
        -:   83:
        2:   84:	g_signal_emit_by_name(G_OBJECT(file_chooser), "file-set");
        2:   85:	return FALSE;
        -:   86:}
        -:   87:
        -:   88:/*************\
        -:   89:* ENTRY POINT *
        -:   90:\*************/
        -:   91:
        -:   92:GtkWidget*
        2:   93:jmrg_file_chooser_init(struct value_map *vmap)
        -:   94:{
        2:   95:	GtkWidget *container = NULL;
        2:   96:	GtkWidget *label = NULL;
        2:   97:	GtkWidget *button = NULL;
        2:   98:	GtkWidget *sw = NULL;
        -:   99:	const char* label_text;
        -:  100:	const char* chooser_title;
        -:  101:
        2:  102:	if(!vmap)
    #####:  103:		goto cleanup;
        -:  104:
        2:  105:	container = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
        2:  106:	if(!container)
    #####:  107:		goto cleanup;
        -:  108:
        2:  109:	switch(vmap->type) {
        1:  110:	case RDS_FIELD_PS:
        1:  111:		label_text = "Dynamic PSN from file";
        1:  112:		chooser_title = "Dynamic PSN data file";
        1:  113:		break;
        1:  114:	case RDS_FIELD_RT:
        1:  115:		label_text = "Dynamic RT from file";
        1:  116:		chooser_title = "Dynamic RT data file";
        1:  117:		break;
    #####:  118:	default:
    #####:  119:		goto cleanup;
        -:  120:	}
        -:  121:
        2:  122:	label = gtk_label_new(label_text);
        2:  123:	if(!label)
    #####:  124:		goto cleanup;
        2:  125:	gtk_box_pack_start(GTK_BOX(container), label, 0, 0, 6);
        -:  126:
        2:  127:	button = gtk_file_chooser_button_new(chooser_title,
        -:  128:					     GTK_FILE_CHOOSER_ACTION_OPEN);
        2:  129:	if(!button)
    #####:  130:		goto cleanup;
        2:  131:	gtk_box_pack_start(GTK_BOX(container), button, 0, 0, 6);
        -:  132:
        2:  133:	sw = gtk_switch_new();
        2:  134:	if(!sw)
    #####:  135:		goto cleanup;
        2:  136:	gtk_box_pack_end(GTK_BOX(container), sw, 0, 0, 8);
        -:  137:
        2:  138:	vmap->sw = sw;
        -:  139:
        2:  140:	g_signal_connect(sw, "state-set", G_CALLBACK(jmrg_file_chooser_swtoggle),
        -:  141:			 vmap);
        -:  142:
        2:  143:	g_signal_connect(button, "file-set",
        -:  144:			 G_CALLBACK(jmrg_file_chooser_done),
        -:  145:			 vmap);
        2:  146:	return container;
    #####:  147: cleanup:
    #####:  148:	if(button)
    #####:  149:		gtk_widget_destroy(button);
    #####:  150:	if(label)
    #####:  151:		gtk_widget_destroy(label);
    #####:  152:	if(container)
    #####:  153:		gtk_widget_destroy(container);
    #####:  154:	return NULL;
        -:  155:}
