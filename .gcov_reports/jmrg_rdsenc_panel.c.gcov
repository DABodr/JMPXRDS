        -:    0:Source:gui/jmrg_rdsenc_panel.c
        -:    1:#include <stdlib.h>	/* For malloc() / free() */
        -:    2:#include <string.h>	/* For memset() */
        -:    3:#include "jmpxrds_gui.h"
        -:    4:
        -:    5:
        -:    6:/**************\
        -:    7:* STATION INFO *
        -:    8:\**************/
        -:    9:
        -:   10:static GtkWidget*
        1:   11:jmrg_rdsc_station_info_init(struct rds_encoder_state *st)
        -:   12:{
        1:   13:	GtkWidget *container = NULL;
        1:   14:	GtkWidget *vbox = NULL;
        1:   15:	GtkWidget *top_hbox = NULL;
        1:   16:	GtkWidget *ps = NULL;
        1:   17:	GtkWidget *pi = NULL;
        1:   18:	GtkWidget *bottom_hbox = NULL;
        1:   19:	GtkWidget *ecc = NULL;
        1:   20:	GtkWidget *lic = NULL;
        -:   21:
        1:   22:	container = gtk_frame_new("Station Info");
        1:   23:	if(!container)
    #####:   24:		goto cleanup;
        1:   25:	gtk_frame_set_label_align(GTK_FRAME(container), 0.5, 0.6);
        1:   26:	gtk_frame_set_shadow_type(GTK_FRAME(container),
        -:   27:				  GTK_SHADOW_ETCHED_IN);
        -:   28:
        1:   29:	vbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
        1:   30:	if(!vbox)
    #####:   31:		goto cleanup;
        1:   32:	gtk_container_add(GTK_CONTAINER(container), vbox);
        -:   33:
        1:   34:	top_hbox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
        1:   35:	if(!top_hbox)
    #####:   36:		goto cleanup;
        1:   37:	gtk_box_pack_start(GTK_BOX(vbox), top_hbox, 1, 1, 6);
        -:   38:
        1:   39:	ps = jmrg_display_field_init(st, "Programme Service Name (PSN)",
        -:   40:				     RDS_FIELD_PS);
        1:   41:	if(!ps)
    #####:   42:		goto cleanup;
        1:   43:	gtk_box_pack_start(GTK_BOX(top_hbox), ps, 1, 1, 6);
        -:   44:
        1:   45:	pi = jmrg_display_field_init(st, "Programme Identifier (PI)",
        -:   46:				     RDS_FIELD_PI);
        1:   47:	if(!pi)
    #####:   48:		goto cleanup;
        1:   49:	gtk_box_pack_start(GTK_BOX(top_hbox), pi, 0, 0, 6);
        -:   50:
        1:   51:	bottom_hbox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
        1:   52:	if(!bottom_hbox)
    #####:   53:		goto cleanup;
        1:   54:	gtk_box_pack_start(GTK_BOX(vbox), bottom_hbox, 1, 1, 6);
        -:   55:
        1:   56:	ecc = jmrg_acentry_init(st, "Country", RDS_FIELD_ECC);
        1:   57:	if(!ecc)
    #####:   58:		goto cleanup;
        1:   59:	gtk_box_pack_start(GTK_BOX(bottom_hbox), ecc, 1, 1, 6);
        -:   60:
        1:   61:	lic = jmrg_acentry_init(st, "Language", RDS_FIELD_LIC);
        1:   62:	if(!lic)
    #####:   63:		goto cleanup;
        1:   64:	gtk_box_pack_start(GTK_BOX(bottom_hbox), lic, 1, 1, 6);
        -:   65:
        1:   66:	return container;
    #####:   67: cleanup:
    #####:   68:	if(ecc)
    #####:   69:		gtk_widget_destroy(ecc);
    #####:   70:	if(bottom_hbox)
    #####:   71:		gtk_widget_destroy(bottom_hbox);
    #####:   72:	if(pi)
    #####:   73:		gtk_widget_destroy(pi);
    #####:   74:	if(ps)
    #####:   75:		gtk_widget_destroy(ps);
    #####:   76:	if(top_hbox)
    #####:   77:		gtk_widget_destroy(top_hbox);
    #####:   78:	if(vbox)
    #####:   79:		gtk_widget_destroy(vbox);
    #####:   80:	if(container)
    #####:   81:		gtk_widget_destroy(container);
    #####:   82:	return NULL;
        -:   83:}
        -:   84:
        -:   85:
        -:   86:/****************\
        -:   87:* PROGRAMME INFO *
        -:   88:\****************/
        -:   89:
        -:   90:static GtkWidget *
        1:   91:jmrg_rdsc_programme_flags_init(struct rds_encoder_state *st)
        -:   92:{
        1:   93:	GtkWidget *container = NULL;
        1:   94:	GtkWidget *vbox = NULL;
        1:   95:	GtkWidget *ms_switch = NULL;
        1:   96:	GtkWidget *ta = NULL;
        1:   97:	GtkWidget *tp = NULL;
        -:   98:
        1:   99:	container = gtk_frame_new("Programme Flags");
        1:  100:	if(!container)
    #####:  101:		goto cleanup;
        1:  102:	gtk_frame_set_label_align(GTK_FRAME(container), 0.1, 0.6);
        1:  103:	gtk_frame_set_shadow_type(GTK_FRAME(container),
        -:  104:				  GTK_SHADOW_ETCHED_IN);
        -:  105:
        1:  106:	vbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
        1:  107:	if(!vbox)
    #####:  108:		goto cleanup;
        1:  109:	gtk_container_add(GTK_CONTAINER(container), vbox);
        -:  110:
        1:  111:	ms_switch = jmrg_checkbox_init(st, "Music / Speech switch (MS)",
        -:  112:				       RDS_FIELD_MS, 1, 0);
        1:  113:	if(!ms_switch)
    #####:  114:		goto cleanup;
        1:  115:	gtk_box_pack_end(GTK_BOX(vbox), ms_switch, 0, 0, 6);
        -:  116:
        1:  117:	ta = jmrg_checkbox_init(st, "Traffic Announcement", RDS_FIELD_TA, 1, 0);
        1:  118:	if(!ta)
    #####:  119:		goto cleanup;
        1:  120:	gtk_box_pack_start(GTK_BOX(vbox), ta, 0, 0, 6);
        -:  121:
        1:  122:	tp = jmrg_checkbox_init(st, "Traffic Programme", RDS_FIELD_TP, 1, 0);
        1:  123:	if(!tp)
    #####:  124:		goto cleanup;
        1:  125:	gtk_box_pack_end(GTK_BOX(vbox), tp, 0, 0, 6);
        -:  126:
        1:  127:	return container;
    #####:  128: cleanup:
    #####:  129:	if(ta)
    #####:  130:		gtk_widget_destroy(ta);
    #####:  131:	if(ms_switch)
    #####:  132:		gtk_widget_destroy(ms_switch);
    #####:  133:	if(vbox)
    #####:  134:		gtk_widget_destroy(vbox);
    #####:  135:	if(container)
    #####:  136:		gtk_widget_destroy(container);
    #####:  137:	return NULL;
        -:  138:}
        -:  139:
        -:  140:static GtkWidget*
        1:  141:jmrg_rdsc_programme_info_init(struct rds_encoder_state *st)
        -:  142:{
        1:  143:	GtkWidget *container = NULL;
        1:  144:	GtkWidget *hbox = NULL;
        1:  145:	GtkWidget *ptyn = NULL;
        1:  146:	GtkWidget *pty = NULL;
        1:  147:	GtkWidget *programme_flags = NULL;
        -:  148:
        1:  149:	container = gtk_frame_new("Programme Info");
        1:  150:	if(!container)
    #####:  151:		goto cleanup;
        1:  152:	gtk_frame_set_label_align(GTK_FRAME(container), 0.5, 0.6);
        1:  153:	gtk_frame_set_shadow_type(GTK_FRAME(container),
        -:  154:				  GTK_SHADOW_ETCHED_IN);
        -:  155:
        1:  156:	hbox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
        1:  157:	if(!hbox)
    #####:  158:		goto cleanup;
        1:  159:	gtk_container_add(GTK_CONTAINER(container), hbox);
        -:  160:
        1:  161:	ptyn = jmrg_display_field_init(st, "Programme Type Name (PTYN)",
        -:  162:				       RDS_FIELD_PTYN);
        1:  163:	if(!ptyn)
    #####:  164:		goto cleanup;
        1:  165:	gtk_box_pack_start(GTK_BOX(hbox), ptyn, 1, 1, 6);
        -:  166:
        1:  167:	pty = jmrg_cbox_text_init(st, "Programme Type (PTY)", RDS_FIELD_PTY);
        1:  168:	if(!pty)
    #####:  169:		goto cleanup;
        1:  170:	gtk_box_pack_start(GTK_BOX(hbox), pty, 0, 0, 6);
        -:  171:
        1:  172:	programme_flags = jmrg_rdsc_programme_flags_init(st);
        1:  173:	if(!programme_flags)
    #####:  174:		goto cleanup;
        1:  175:	gtk_box_pack_end(GTK_BOX(hbox), programme_flags, 0, 0, 6);
        -:  176:
        1:  177:	return container;
    #####:  178: cleanup:
    #####:  179:	if(pty)
    #####:  180:		gtk_widget_destroy(pty);
    #####:  181:	if(ptyn)
    #####:  182:		gtk_widget_destroy(ptyn);
    #####:  183:	if(hbox)
    #####:  184:		gtk_widget_destroy(container);
    #####:  185:	return NULL;
        -:  186:}
        -:  187:
        -:  188:
        -:  189:/**************\
        -:  190:* DECODER INFO *
        -:  191:\**************/
        -:  192:
        -:  193:static GtkWidget*
        1:  194:jmrg_rdsc_decoder_info_init(struct rds_encoder_state *st)
        -:  195:{
        1:  196:	GtkWidget *container = NULL;
        1:  197:	GtkWidget *fbox = NULL;
        1:  198:	GtkWidget *stereo = NULL;
        1:  199:	GtkWidget *art_head = NULL;
        1:  200:	GtkWidget *compressed = NULL;
        1:  201:	GtkWidget *dynpty = NULL;
        -:  202:
        1:  203:	container = gtk_frame_new("Decoder Info");
        1:  204:	if(!container)
    #####:  205:		goto cleanup;
        1:  206:	gtk_frame_set_label_align(GTK_FRAME(container), 0.1, 0.6);
        1:  207:	gtk_frame_set_shadow_type(GTK_FRAME(container),
        -:  208:				  GTK_SHADOW_ETCHED_IN);
        -:  209:
        1:  210:	fbox = gtk_flow_box_new();
        1:  211:	if(!fbox)
    #####:  212:		goto cleanup;
        1:  213:	gtk_container_add(GTK_CONTAINER(container), fbox);
        -:  214:
        1:  215:	gtk_flow_box_set_min_children_per_line(GTK_FLOW_BOX(fbox), 2);
        1:  216:	gtk_flow_box_set_max_children_per_line(GTK_FLOW_BOX(fbox), 2);
        -:  217:
        1:  218:	stereo = jmrg_checkbox_init(st, "Stereo", RDS_FIELD_DI,
        -:  219:				    RDS_DI_STEREO, 0);
        1:  220:	if(!stereo)
    #####:  221:		goto cleanup;
        1:  222:	gtk_flow_box_insert(GTK_FLOW_BOX(fbox), stereo, -1);
        -:  223:
        1:  224:	art_head = jmrg_checkbox_init(st, "Artificial Head", RDS_FIELD_DI,
        -:  225:				      RDS_DI_ARTIFICIAL_HEAD, 0);
        1:  226:	if(!art_head)
    #####:  227:		goto cleanup;
        1:  228:	gtk_flow_box_insert(GTK_FLOW_BOX(fbox), art_head, -1);
        -:  229:
        1:  230:	compressed = jmrg_checkbox_init(st, "Compressed", RDS_FIELD_DI,
        -:  231:					RDS_DI_COMPRESSED, 0);
        1:  232:	if(!compressed)
    #####:  233:		goto cleanup;
        1:  234:	gtk_flow_box_insert(GTK_FLOW_BOX(fbox), compressed, -1);
        -:  235:
        1:  236:	dynpty = jmrg_checkbox_init(st, "Dynamic PTY", RDS_FIELD_DI,
        -:  237:				    RDS_DI_DYNPTY, 0);
        1:  238:	if(!dynpty)
    #####:  239:		goto cleanup;
        1:  240:	gtk_flow_box_insert(GTK_FLOW_BOX(fbox), dynpty, -1);
        -:  241:
        1:  242:	return container;
    #####:  243: cleanup:
    #####:  244:	if(compressed)
    #####:  245:		gtk_widget_destroy(compressed);
    #####:  246:	if(art_head)
    #####:  247:		gtk_widget_destroy(art_head);
    #####:  248:	if(stereo)
    #####:  249:		gtk_widget_destroy(stereo);
    #####:  250:	if(fbox)
    #####:  251:		gtk_widget_destroy(fbox);
    #####:  252:	if(container)
    #####:  253:		gtk_widget_destroy(container);
    #####:  254:	return NULL;
        -:  255:}
        -:  256:
        -:  257:
        -:  258:/*************\
        -:  259:* ENTRY POINT *
        -:  260:\*************/
        -:  261:
        -:  262:int
        1:  263:jmrg_rdsenc_panel_init(struct control_page *ctl_page)
        -:  264:{
        1:  265:	GtkWidget *container = NULL;
        1:  266:	GtkWidget *station_info = NULL;
        1:  267:	GtkWidget *radiotext = NULL;
        1:  268:	GtkWidget *programme_info = NULL;
        1:  269:	GtkWidget *hbox = NULL;
        1:  270:	GtkWidget *lvbox = NULL;
        1:  271:	GtkWidget *mvbox = NULL;
        1:  272:	GtkWidget *rvbox = NULL;
        1:  273:	GtkWidget *decoder_info = NULL;
        1:  274:	GtkWidget *encoder_onoff_sw = NULL;
        1:  275:	GtkWidget *rds_logo = NULL;
        1:  276:	GdkPixbuf *pixbuf_rds_logo = NULL;
        1:  277:	struct rds_encoder_state *st = NULL;
        1:  278:	int ret = 0;
        -:  279:
        -:  280:	/* Attach shared memory to talk with JMPXRDS */
        1:  281:	ctl_page->shmem = utils_shm_attach(RDS_ENC_SHM_NAME,
        -:  282:					   sizeof(struct rds_encoder_state));
        1:  283:	if(!ctl_page->shmem) {
    #####:  284:		utils_perr("Unable to communicate with JMPXRDS");
    #####:  285:		ret = -1;
    #####:  286:		goto cleanup;
        -:  287:	}
        1:  288:	st = (struct rds_encoder_state*) ctl_page->shmem->mem;
        -:  289:
        1:  290:	container = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
        1:  291:	if(!container) {
    #####:  292:		ret = -1;
    #####:  293:		goto cleanup;
        -:  294:	}
        1:  295:	ctl_page->container = container;
        -:  296:
        1:  297:	station_info = jmrg_rdsc_station_info_init(st);
        1:  298:	if(!station_info) {
    #####:  299:		ret = -2;
    #####:  300:		goto cleanup;
        -:  301:	}
        1:  302:	gtk_box_pack_start(GTK_BOX(container), station_info, 0, 0, 6);
        -:  303:
        1:  304:	radiotext = jmrg_display_field_init(st, "RadioText",
        -:  305:					    RDS_FIELD_RT);
        1:  306:	if(!radiotext) {
    #####:  307:		ret = -3;
    #####:  308:		goto cleanup;
        -:  309:	}
        1:  310:	gtk_box_pack_start(GTK_BOX(container), radiotext, 0, 0, 6);
        -:  311:
        1:  312:	programme_info = jmrg_rdsc_programme_info_init(st);
        1:  313:	if(!programme_info) {
    #####:  314:		ret = -4;
    #####:  315:		goto cleanup;
        -:  316:	}
        1:  317:	gtk_box_pack_start(GTK_BOX(container), programme_info, 0, 0, 6);
        -:  318:
        -:  319:
        1:  320:	hbox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
        1:  321:	if(!hbox) {
    #####:  322:		ret = -4;
    #####:  323:		goto cleanup;
        -:  324:	}
        1:  325:	gtk_box_pack_start(GTK_BOX(container), hbox, 0, 0, 6);
        -:  326:
        1:  327:	lvbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
        1:  328:	if(!lvbox) {
    #####:  329:		ret = -5;
    #####:  330:		goto cleanup;
        -:  331:	}
        1:  332:	gtk_box_pack_start(GTK_BOX(hbox), lvbox, 1, 1, 6);
        -:  333:	
        1:  334:	decoder_info = jmrg_rdsc_decoder_info_init(st);
        1:  335:	if(!decoder_info) {
    #####:  336:		ret = -4;
    #####:  337:		goto cleanup;
        -:  338:	}
        1:  339:	gtk_box_set_center_widget(GTK_BOX(lvbox), decoder_info);
        -:  340:
        1:  341:	mvbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
        1:  342:	if(!mvbox) {
    #####:  343:		ret = -5;
    #####:  344:		goto cleanup;
        -:  345:	}
        1:  346:	gtk_box_pack_start(GTK_BOX(hbox), mvbox, 0, 0, 6);
        -:  347:
        1:  348:	encoder_onoff_sw = jmrg_switch_init("Enable / Disable RDS Encoder",
        1:  349:				 	    (int*) &st->enabled);
        1:  350:	if(!encoder_onoff_sw) {
    #####:  351:		ret = -5;
    #####:  352:		goto cleanup;
        -:  353:	}
        1:  354:	gtk_box_set_center_widget(GTK_BOX(mvbox), encoder_onoff_sw);
        -:  355:
        1:  356:	rvbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
        1:  357:	if(!rvbox) {
    #####:  358:		ret = -5;
    #####:  359:		goto cleanup;
        -:  360:	}
        1:  361:	gtk_box_pack_end(GTK_BOX(hbox), rvbox, 0, 0, 6);
        -:  362:
        -:  363:	/* Initialize RDS logo image */
        1:  364:	pixbuf_rds_logo = gdk_pixbuf_new_from_file_at_scale(
        -:  365:						DATA_PATH"rds_logo.png",
        -:  366:						162, 44, TRUE, NULL);
        1:  367:	if(!pixbuf_rds_logo) {
        1:  368:		pixbuf_rds_logo = gdk_pixbuf_new_from_file_at_scale(
        -:  369:						"gui/images/rds_logo.png",
        -:  370:						162, 44, TRUE, NULL);
        1:  371:		if(!pixbuf_rds_logo) {
    #####:  372:				ret = -13;
    #####:  373:			goto cleanup;
        -:  374:		}
        -:  375:	}
        -:  376:
        1:  377:	rds_logo = gtk_image_new_from_pixbuf(pixbuf_rds_logo);
        1:  378:	if(!rds_logo) {
    #####:  379:		ret = -14;
    #####:  380:		goto cleanup;
        -:  381:	}
        1:  382:	gtk_box_pack_end(GTK_BOX(rvbox), rds_logo, 1, 1, 20);
        -:  383:
        -:  384:
        -:  385:	/* Set the label for the page */
        1:  386:	ctl_page->label = gtk_label_new("RDS Encoder");
        1:  387:	if(!ctl_page->label) {
    #####:  388:		ret = -15;
    #####:  389:		goto cleanup;
        -:  390:	}
        -:  391:
        -:  392:	/* Register signal hanlder for unrealize */
        1:  393:	g_signal_connect(hbox, "unrealize", G_CALLBACK(jmrg_panel_destroy),
        -:  394:			 ctl_page);
        -:  395:
        1:  396:	return 0;
    #####:  397: cleanup:
    #####:  398:	if(rds_logo)
    #####:  399:		gtk_widget_destroy(rds_logo);
    #####:  400:	if(pixbuf_rds_logo)
    #####:  401:		g_object_unref(pixbuf_rds_logo);
    #####:  402:	if(rvbox)
    #####:  403:		gtk_widget_destroy(rvbox);
    #####:  404:	if(encoder_onoff_sw)
    #####:  405:		gtk_widget_destroy(encoder_onoff_sw);
    #####:  406:	if(mvbox)
    #####:  407:		gtk_widget_destroy(mvbox);
    #####:  408:	if(decoder_info)
    #####:  409:		gtk_widget_destroy(decoder_info);
    #####:  410:	if(lvbox)
    #####:  411:		gtk_widget_destroy(lvbox);
    #####:  412:	if(hbox)
    #####:  413:		gtk_widget_destroy(hbox);
    #####:  414:	if(programme_info)
    #####:  415:		gtk_widget_destroy(programme_info);
    #####:  416:	if(radiotext)
    #####:  417:		gtk_widget_destroy(radiotext);
    #####:  418:	if(station_info)
    #####:  419:		gtk_widget_destroy(station_info);
    #####:  420:	if(container)
    #####:  421:		gtk_widget_destroy(container);
    #####:  422:	if(ctl_page->shmem)
    #####:  423:		utils_shm_destroy(ctl_page->shmem, 0);
    #####:  424:	if(ctl_page)
    #####:  425:		free(ctl_page);
    #####:  426:	utils_err("[RDSENC PANEL] Init failed with code: %i\n", ret);
    #####:  427:	return ret;
        -:  428:}
