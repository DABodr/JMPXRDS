        -:    0:Source:gui/jmrg_rtpstats.c
        -:    1:#include <stdlib.h>	/* For malloc() / free() */
        -:    2:#include <string.h>	/* For memset() */
        -:    3:#include "jmpxrds_gui.h"
        -:    4:
        -:    5:/******************\
        -:    6:* POLLING FUNCTION *
        -:    7:\******************/
        -:    8:
        -:    9:static gboolean
      116:   10:jmrg_rtpstats_poll(gpointer data)
        -:   11:{
      116:   12:	struct value_map *vmap = (struct value_map*) data;
      116:   13:	struct rtp_server_control *ctl = NULL;
      116:   14:	char tmp[12] = {0};
        -:   15:	static guint64 prev_rtp_bps = 0;
        -:   16:	static guint64 prev_rtcp_bps = 0;
      116:   17:	int kbps = 0;
        -:   18:
      116:   19:	if(!data)
    #####:   20:		return FALSE;
        -:   21:
      116:   22:	ctl = vmap->rtp_ctl;
        -:   23:
      116:   24:	if(!ctl)
    #####:   25:		return FALSE;
        -:   26:
     116*:   27:	if(!GTK_IS_LABEL(vmap->target))
    #####:   28:		return FALSE;
        -:   29:
     116*:   30:	if(!GTK_IS_LABEL(vmap->target2))
    #####:   31:		return FALSE;
        -:   32:
      116:   33:	if(!gtk_widget_is_visible(vmap->target))
      104:   34:		return TRUE;
        -:   35:
       12:   36:	kbps = (int) ((ctl->rtp_bytes_sent - prev_rtp_bps) / 1024);
       12:   37:	snprintf(tmp, 12, "%i KB/s", kbps);
       12:   38:	gtk_label_set_text(GTK_LABEL(vmap->target), tmp);
       12:   39:	prev_rtp_bps = ctl->rtp_bytes_sent;
        -:   40:
       12:   41:	kbps = (int) ((ctl->rtcp_bytes_sent - prev_rtcp_bps) / 1024);
       12:   42:	snprintf(tmp, 12, "%i KB/s", kbps);
       12:   43:	gtk_label_set_text(GTK_LABEL(vmap->target2), tmp);
       12:   44:	prev_rtcp_bps = ctl->rtcp_bytes_sent;
        -:   45:
       12:   46:	return TRUE;
        -:   47:}
        -:   48:
        -:   49:
        -:   50:/*************\
        -:   51:* ENTRY POINT *
        -:   52:\*************/
        -:   53:
        -:   54:GtkWidget*
        1:   55:jmrg_rtpstats_init(struct rtp_server_control *ctl)
        -:   56:{
        1:   57:	GtkWidget *container = NULL;
        1:   58:	GtkWidget *vbox = NULL;
        1:   59:	GtkWidget *hbox1 = NULL;
        1:   60:	GtkWidget *rtp_kbps_desc = NULL;
        1:   61:	GtkWidget *rtp_kbps = NULL;
        1:   62:	GtkWidget *hbox2 = NULL;
        1:   63:	GtkWidget *rtcp_kbps_desc = NULL;
        1:   64:	GtkWidget *rtcp_kbps = NULL;
        1:   65:	struct value_map *vmap = NULL;
        -:   66:
        1:   67:	container = gtk_frame_new("RTP Statistics");
        1:   68:	if(!container)
    #####:   69:		goto cleanup;
        1:   70:	gtk_frame_set_label_align(GTK_FRAME(container), 0.5, 0.6);
        1:   71:	gtk_frame_set_shadow_type(GTK_FRAME(container),
        -:   72:				  GTK_SHADOW_ETCHED_IN);
        -:   73:
        1:   74:	vbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
        1:   75:	if(!vbox)
    #####:   76:		goto cleanup;
        1:   77:	gtk_container_add(GTK_CONTAINER(container), vbox);
        -:   78:
        1:   79:	hbox1 = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
        1:   80:	if(!hbox1)
    #####:   81:		goto cleanup;
        1:   82:	gtk_box_pack_start(GTK_BOX(vbox), hbox1, 0, 0, 6);
        -:   83:
        1:   84:	rtp_kbps_desc = gtk_label_new("Outgoing RTP:");
        1:   85:	if(!rtp_kbps_desc)
    #####:   86:		goto cleanup;
        1:   87:	gtk_box_pack_start(GTK_BOX(hbox1), rtp_kbps_desc, 0, 0, 6);
        -:   88:
        1:   89:	rtp_kbps = gtk_label_new("0 KB/s");
        1:   90:	if(!rtp_kbps)
    #####:   91:		goto cleanup;
        1:   92:	gtk_box_pack_end(GTK_BOX(hbox1), rtp_kbps, 0, 0, 6);
        -:   93:
        1:   94:	hbox2 = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
        1:   95:	if(!hbox2)
    #####:   96:		goto cleanup;
        1:   97:	gtk_box_pack_start(GTK_BOX(vbox), hbox2, 0, 0, 6);
        -:   98:
        1:   99:	rtcp_kbps_desc = gtk_label_new("Outgoing RTCP:");
        1:  100:	if(!rtcp_kbps_desc)
    #####:  101:		goto cleanup;
        1:  102:	gtk_box_pack_start(GTK_BOX(hbox2), rtcp_kbps_desc, 0, 0, 6);
        -:  103:
        1:  104:	rtcp_kbps = gtk_label_new("0 KB/s");
        1:  105:	if(!rtcp_kbps)
    #####:  106:		goto cleanup;
        1:  107:	gtk_box_pack_start(GTK_BOX(hbox2), rtcp_kbps, 0, 0, 6);
        -:  108:
        -:  109:	/* Initialize value_map */
        1:  110:	vmap = (struct value_map*) malloc(sizeof(struct value_map));
        1:  111:	if(!vmap)
    #####:  112:		goto cleanup;
        1:  113:	memset(vmap, 0, sizeof(struct value_map));
        -:  114:
        1:  115:	vmap->target = rtp_kbps;
        1:  116:	vmap->target2 = rtcp_kbps;
        1:  117:	vmap->rtp_ctl = ctl;
        -:  118:
        -:  119:	/* Register polling function and signal handlers */
        1:  120:	vmap->esid = g_timeout_add(1000, jmrg_rtpstats_poll, vmap);
        -:  121:
        1:  122:	g_signal_connect(container, "unrealize", G_CALLBACK(jmrg_free_vmap),
        -:  123:			 vmap);
        -:  124:
        1:  125:	return container;
    #####:  126: cleanup:
    #####:  127:	if(rtcp_kbps)
    #####:  128:		gtk_widget_destroy(rtcp_kbps);
    #####:  129:	if(rtcp_kbps_desc)
    #####:  130:		gtk_widget_destroy(rtcp_kbps_desc);
    #####:  131:	if(hbox2)
    #####:  132:		gtk_widget_destroy(hbox2);
    #####:  133:	if(rtp_kbps)
    #####:  134:		gtk_widget_destroy(rtp_kbps);
    #####:  135:	if(rtp_kbps_desc)
    #####:  136:		gtk_widget_destroy(rtp_kbps_desc);
    #####:  137:	if(hbox1)
    #####:  138:		gtk_widget_destroy(hbox1);
    #####:  139:	if(vbox)
    #####:  140:		gtk_widget_destroy(vbox);
    #####:  141:	if(container)
    #####:  142:		gtk_widget_destroy(container);
    #####:  143:	return NULL;
        -:  144:}
