        -:    0:Source:oscilator.c
        -:    1:/*
        -:    2: * JMPXRDS, an FM MPX signal generator with RDS support on
        -:    3: * top of Jack Audio Connection Kit - Oscilator
        -:    4: *
        -:    5: * Copyright (C) 2015 Nick Kossifidis <mickflemm@gmail.com>
        -:    6: *
        -:    7: * This program is free software: you can redistribute it and/or modify
        -:    8: * it under the terms of the GNU General Public License as published by
        -:    9: * the Free Software Foundation, either version 3 of the License, or
        -:   10: * (at your option) any later version.
        -:   11: *
        -:   12: * This program is distributed in the hope that it will be useful,
        -:   13: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   14: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   15: * GNU General Public License for more details.
        -:   16: *
        -:   17: * You should have received a copy of the GNU General Public License
        -:   18: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   19: */
        -:   20:#include "oscilator.h"
        -:   21:#include <stdlib.h>		/* For NULL */
        -:   22:#include <math.h>		/* For sin, cos, M_PI, fmod and signbit */
        -:   23:#include <string.h>		/* For memset */
        -:   24:
        -:   25:/***********\
        -:   26:* OSCILATOR *
        -:   27:\***********/
        -:   28:
        -:   29:/*
        -:   30: * This is the implementation of a sine wave generator that
        -:   31: * produces 3 phase-synced sine waves of frequencies 19KHz,
        -:   32: * 38KHz and 57KHz, used to create the FM MPX signal. It can
        -:   33: * also produce a cosine the same way for use in SSB modulation.
        -:   34: */
        -:   35:
        -:   36:/**
        -:   37: * osc_initialize_state - Initialize the oscilator's state
        -:   38: *
        -:   39: */
        -:   40:int
        2:   41:osc_initialize(struct osc_state *osc, uint32_t sample_rate, int type)
        -:   42:{
        2:   43:	if (osc == NULL)
    #####:   44:		return -1;
        -:   45:
        2:   46:	memset(osc, 0, sizeof(struct osc_state));
        2:   47:	osc->type = type;
        -:   48:
        -:   49:	/*
        -:   50:	 * Due to Nyquist sampling theorem, the sample rate must be at
        -:   51:	 * least twice the frequency we want to sample. To make it more
        -:   52:	 * safe, check if the max supported frequency divided by
        -:   53:	 * the sample rate is an even number (a multiple of 2)
        -:   54:	 */
        2:   55:	if ((MAX_FREQUENCY >= sample_rate) ||
        2:   56:	    ((MAX_FREQUENCY / sample_rate) & 1))
    #####:   57:		return -3;
        -:   58:
        2:   59:	osc->sample_rate = sample_rate;
        -:   60:
        -:   61:	/*
        -:   62:	 * On each second we will play <osc_sample_rate> samples, so if we
        -:   63:	 * want to play the sine wave we'll need to increase the phase on
        -:   64:	 * each sample in such a way so that its period (1sec) fits within
        -:   65:	 * <osc_sample_rate> slots.
        -:   66:	 */
        2:   67:	osc->phase_step = ((double) (ONE_PERIOD)) / ((double) osc->sample_rate);
        -:   68:
        2:   69:	return 0;
        -:   70:}
        -:   71:
        -:   72:/**
        -:   73: * osc_increase_phase - Increase the current sine phase
        -:   74: *
        -:   75: */
        -:   76:void
 45313020:   77:osc_increase_phase(struct osc_state *osc)
        -:   78:{
        -:   79:	/* Make sure we don't exceed one period
        -:   80:	 * note that sin/cos will not have an issue since they'll
        -:   81:	 * rewind themselves, however we risk an overflow of
        -:   82:	 * current_phase so be on the safe side. This will also
        -:   83:	 * take care of current_phase's sign since fmod will return
        -:   84:	 * a value with the same sign. */
 45313020:   85:	osc->current_phase = fmod(osc->current_phase + osc->phase_step,
        -:   86:				  (double) (ONE_PERIOD));
        -:   87:
 45313020:   88:	return;
        -:   89:}
        -:   90:
        -:   91:/*
        -:   92: * On the functions below we want to get some sine waves of a specific
        -:   93: * frequency that are all phase-synced (that means they all start at
        -:   94: * the same time or -in our case- from the same phase). To do that we'll
        -:   95: * need to playback a sine period <frequency> times faster, so we multiply
        -:   96: * the phase with the frequency.
        -:   97: */
        -:   98:
        -:   99:/**
        -:  100: * osc_get_sample_for_freq -	Get a sample for the given frequency
        -:  101: *				at the current phase.
        -:  102: */
        -:  103:float
134893300:  104:osc_get_sample_for_freq(const struct osc_state *osc, float freq)
        -:  105:{
134893300:  106:	double phase = osc->current_phase * (double) freq;
        -:  107:
134893300:  108:	switch (osc->type) {
134669556:  109:	case OSC_TYPE_SINE:
134669556:  110:		return (float) sin(phase);
   223744:  111:	case OSC_TYPE_COSINE:
   223744:  112:		return (float) cos(phase);
    #####:  113:	default:
    #####:  114:		return 0;
        -:  115:	}
        -:  116:}
        -:  117:
        -:  118:/**
        -:  119: * osc_get_19Khz_sample -	Get a 19KHz sample for the current
        -:  120: *				phase.
        -:  121: */
        -:  122:float
 44807164:  123:osc_get_19Khz_sample(struct osc_state *osc)
        -:  124:{
 44807164:  125:	return osc_get_sample_for_freq(osc, 19000.0);
        -:  126:}
        -:  127:
        -:  128:/**
        -:  129: * osc_get_38Khz_sample -	Get a 38KHz sample for the current
        -:  130: *				phase.
        -:  131: */
        -:  132:float
 44583420:  133:osc_get_38Khz_sample(struct osc_state *osc)
        -:  134:{
 44583420:  135:	return osc_get_sample_for_freq(osc, 38000.0);
        -:  136:}
        -:  137:
        -:  138:/**
        -:  139: * osc_get_57Khz_sample -	Get a 57KHz sample for the current
        -:  140: *				phase.
        -:  141: */
        -:  142:float
 45055228:  143:osc_get_57Khz_sample(struct osc_state *osc)
        -:  144:{
 45055228:  145:	return osc_get_sample_for_freq(osc, 57000.0);
        -:  146:}
