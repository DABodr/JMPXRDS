        -:    0:Source:gui/jmrg_cbox_text.c
        -:    1:#include <stdlib.h>	/* For malloc() */
        -:    2:#include <string.h>	/* For memset() */
        -:    3:#include "jmpxrds_gui.h"
        -:    4:#include "rds_codes.h"
        -:    5:
        -:    6:/******************\
        -:    7:* POLLING FUNCTION *
        -:    8:\******************/
        -:    9:
        -:   10:static gboolean
      568:   11:jmrg_cbox_text_poll(gpointer data)
        -:   12:{
      568:   13:	struct value_map *vmap = (struct value_map*) data;
      568:   14:	struct rds_encoder_state *st = NULL;
      568:   15:	int tmp = 0;
        -:   16:
      568:   17:	if(!vmap)
    #####:   18:		return FALSE;
        -:   19:
      568:   20:	st = vmap->st;
        -:   21:
     568*:   22:	if(!GTK_IS_COMBO_BOX(vmap->target))
    #####:   23:		return FALSE;
        -:   24:
      568:   25:	if(!gtk_widget_is_visible(vmap->target))
      178:   26:		return TRUE;
        -:   27:
      390:   28:	if(gtk_widget_has_focus(vmap->target))
    #####:   29:		return TRUE;
        -:   30:
      390:   31:	if(vmap->type == RDS_FIELD_PTY)
      390:   32:		tmp = rds_get_pty(st);
        -:   33:
      390:   34:	gtk_combo_box_set_active(GTK_COMBO_BOX(vmap->target), tmp);
        -:   35:
      390:   36:	return TRUE;
        -:   37:}
        -:   38:
        -:   39:
        -:   40:/*****************\
        -:   41:* SIGNAL HANDLERS *
        -:   42:\*****************/
        -:   43:
        -:   44:static void
        1:   45:jmrg_cbox_text_changed(GtkComboBox *cbox, gpointer data)
        -:   46:{
        1:   47:	struct value_map *vmap = (struct value_map*) data;
        1:   48:	struct rds_encoder_state *st = NULL;
        1:   49:	int tmp = gtk_combo_box_get_active(cbox);
        -:   50:
        1:   51:	if(!vmap)
    #####:   52:		return;
        -:   53:
        1:   54:	st = vmap->st;
        -:   55:
        1:   56:	if(vmap->type == RDS_FIELD_PTY)
        1:   57:		rds_set_pty(st, (uint8_t) tmp);
        -:   58:
        1:   59:	return;
        -:   60:}
        -:   61:
        -:   62:
        -:   63:/*************\
        -:   64:* ENTRY POINT *
        -:   65:\*************/
        -:   66:
        -:   67:GtkWidget*
        1:   68:jmrg_cbox_text_init(struct rds_encoder_state *st, const char* label, int type)
        -:   69:{
        1:   70:	GtkWidget *container = NULL;
        1:   71:	GtkWidget *vbox = NULL;
        1:   72:	GtkWidget *cbox = NULL;
        1:   73:	struct value_map *vmap = NULL;
        1:   74:	const char *pty_name = NULL;
        1:   75:	int i = 0;
        -:   76:
        -:   77:	/* Use a frame to also have a label there
        -:   78:	 * for free */
        1:   79:	container = gtk_frame_new(label);
        1:   80:	if(!container)
    #####:   81:		goto cleanup;
        1:   82:	gtk_frame_set_label_align(GTK_FRAME(container), 0.05, 0.6);
        1:   83:	gtk_frame_set_shadow_type(GTK_FRAME(container),
        -:   84:				  GTK_SHADOW_ETCHED_IN);
        -:   85:
        -:   86:
        -:   87:	/* Use a box to have better control */
        1:   88:	vbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
        1:   89:	if(!vbox)
    #####:   90:		goto cleanup;
        1:   91:	gtk_container_add(GTK_CONTAINER(container), vbox);
        -:   92:
        -:   93:
        -:   94:	/* Initialize combo box */
        1:   95:	cbox = gtk_combo_box_text_new();
        1:   96:	if(!cbox)
    #####:   97:		goto cleanup;
        1:   98:	gtk_box_set_center_widget(GTK_BOX(vbox), cbox);
        -:   99:
        1:  100:	if(type == RDS_FIELD_PTY) {
        1:  101:		pty_name = rds_codes_get_pty_name(i);
       33:  102:		while(pty_name[0] != '\0') {
       32:  103:			gtk_combo_box_text_insert(GTK_COMBO_BOX_TEXT(cbox), i,
        -:  104:						  NULL, pty_name);
       32:  105:			pty_name = rds_codes_get_pty_name(++i);
        -:  106:		}
        -:  107:	}
        -:  108:
        1:  109:	gtk_combo_box_set_active(GTK_COMBO_BOX(cbox), 0);
        -:  110:
        -:  111:
        -:  112:	/* Initialize value_map */
        1:  113:	vmap = (struct value_map*) malloc(sizeof(struct value_map));
        1:  114:	if(!vmap)
    #####:  115:		goto cleanup;
        1:  116:	memset(vmap, 0, sizeof(struct value_map));
        -:  117:
        1:  118:	vmap->target = cbox;
        1:  119:	vmap->st = st;
        1:  120:	vmap->type = type;
        -:  121:
        -:  122:	/* Register polling function and signal handlers */
        1:  123:	vmap->esid = g_timeout_add(200, jmrg_cbox_text_poll, vmap);
        -:  124:
        1:  125:	g_signal_connect(cbox, "changed", G_CALLBACK(jmrg_cbox_text_changed),
        -:  126:			 vmap);
        -:  127:
        1:  128:	g_signal_connect(cbox, "unrealize", G_CALLBACK(jmrg_free_vmap),
        -:  129:			 vmap);
        -:  130:
        1:  131:	return container;
    #####:  132: cleanup:
    #####:  133:	if(cbox)
    #####:  134:		gtk_widget_destroy(cbox);
    #####:  135:	if(vbox)
    #####:  136:		gtk_widget_destroy(vbox);
    #####:  137:	if(container)
    #####:  138:		gtk_widget_destroy(container);
    #####:  139:	return NULL;
        -:  140:}
