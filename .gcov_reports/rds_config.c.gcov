        -:    0:Source:rds_config.c
        -:    1:/*
        -:    2: * JMPXRDS, an FM MPX signal generator with RDS support on
        -:    3: * top of Jack Audio Connection Kit - RDS Configuration helpers
        -:    4: *
        -:    5: * Copyright (C) 2015 Nick Kossifidis <mickflemm@gmail.com>
        -:    6: *
        -:    7: * This program is free software: you can redistribute it and/or modify
        -:    8: * it under the terms of the GNU General Public License as published by
        -:    9: * the Free Software Foundation, either version 3 of the License, or
        -:   10: * (at your option) any later version.
        -:   11: *
        -:   12: * This program is distributed in the hope that it will be useful,
        -:   13: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   14: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   15: * GNU General Public License for more details.
        -:   16: *
        -:   17: * You should have received a copy of the GNU General Public License
        -:   18: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   19: */
        -:   20:
        -:   21:#include "rds_encoder.h"
        -:   22:#include <string.h>		/* For memset/memcpy/strnlen */
        -:   23:
        -:   24:uint16_t
      771:   25:rds_get_pi(const struct rds_encoder_state *st)
        -:   26:{
      771:   27:	if (st == NULL)
    #####:   28:		return -1;
      771:   29:	return st->pi;
        -:   30:}
------------------
rds_get_pi:
      770:   25:rds_get_pi(const struct rds_encoder_state *st)
        -:   26:{
      770:   27:	if (st == NULL)
    #####:   28:		return -1;
      770:   29:	return st->pi;
        -:   30:}
------------------
rds_get_pi:
        1:   25:rds_get_pi(const struct rds_encoder_state *st)
        -:   26:{
        1:   27:	if (st == NULL)
    #####:   28:		return -1;
        1:   29:	return st->pi;
        -:   30:}
------------------
        -:   31:
        -:   32:int
        2:   33:rds_set_pi(struct rds_encoder_state *st, uint16_t pi)
        -:   34:{
        2:   35:	if (st == NULL)
    #####:   36:		return -1;
        2:   37:	st->pi = pi;
        2:   38:	return 0;
        -:   39:}
------------------
rds_set_pi:
        1:   33:rds_set_pi(struct rds_encoder_state *st, uint16_t pi)
        -:   34:{
        1:   35:	if (st == NULL)
    #####:   36:		return -1;
        1:   37:	st->pi = pi;
        1:   38:	return 0;
        -:   39:}
------------------
rds_set_pi:
        1:   33:rds_set_pi(struct rds_encoder_state *st, uint16_t pi)
        -:   34:{
        1:   35:	if (st == NULL)
    #####:   36:		return -1;
        1:   37:	st->pi = pi;
        1:   38:	return 0;
        -:   39:}
------------------
        -:   40:
        -:   41:uint8_t
      381:   42:rds_get_ecc(const struct rds_encoder_state * st)
        -:   43:{
      381:   44:	if (st == NULL)
    #####:   45:		return 0;
      381:   46:	return st->ecc;
        -:   47:}
------------------
rds_get_ecc:
      380:   42:rds_get_ecc(const struct rds_encoder_state * st)
        -:   43:{
      380:   44:	if (st == NULL)
    #####:   45:		return 0;
      380:   46:	return st->ecc;
        -:   47:}
------------------
rds_get_ecc:
        1:   42:rds_get_ecc(const struct rds_encoder_state * st)
        -:   43:{
        1:   44:	if (st == NULL)
    #####:   45:		return 0;
        1:   46:	return st->ecc;
        -:   47:}
------------------
        -:   48:
        -:   49:int
        2:   50:rds_set_ecc(struct rds_encoder_state *st, uint8_t ecc)
        -:   51:{
        2:   52:	if (st == NULL)
    #####:   53:		return -1;
        -:   54:
        2:   55:	st->ecc = ecc;
        -:   56:
        2:   57:	if (st->ecc == 0)
    #####:   58:		st->ecc_set = 0;
        -:   59:	else
        2:   60:		st->ecc_set = 1;
        -:   61:
        2:   62:	return 0;
        -:   63:}
------------------
rds_set_ecc:
        1:   50:rds_set_ecc(struct rds_encoder_state *st, uint8_t ecc)
        -:   51:{
        1:   52:	if (st == NULL)
    #####:   53:		return -1;
        -:   54:
        1:   55:	st->ecc = ecc;
        -:   56:
        1:   57:	if (st->ecc == 0)
    #####:   58:		st->ecc_set = 0;
        -:   59:	else
        1:   60:		st->ecc_set = 1;
        -:   61:
        1:   62:	return 0;
        -:   63:}
------------------
rds_set_ecc:
        1:   50:rds_set_ecc(struct rds_encoder_state *st, uint8_t ecc)
        -:   51:{
        1:   52:	if (st == NULL)
    #####:   53:		return -1;
        -:   54:
        1:   55:	st->ecc = ecc;
        -:   56:
        1:   57:	if (st->ecc == 0)
    #####:   58:		st->ecc_set = 0;
        -:   59:	else
        1:   60:		st->ecc_set = 1;
        -:   61:
        1:   62:	return 0;
        -:   63:}
------------------
        -:   64:
        -:   65:uint16_t
      376:   66:rds_get_lic(const struct rds_encoder_state * st)
        -:   67:{
      376:   68:	if (st == NULL)
    #####:   69:		return 0;
      376:   70:	return st->lic;
        -:   71:}
------------------
rds_get_lic:
      375:   66:rds_get_lic(const struct rds_encoder_state * st)
        -:   67:{
      375:   68:	if (st == NULL)
    #####:   69:		return 0;
      375:   70:	return st->lic;
        -:   71:}
------------------
rds_get_lic:
        1:   66:rds_get_lic(const struct rds_encoder_state * st)
        -:   67:{
        1:   68:	if (st == NULL)
    #####:   69:		return 0;
        1:   70:	return st->lic;
        -:   71:}
------------------
        -:   72:
        -:   73:int
        2:   74:rds_set_lic(struct rds_encoder_state *st, uint16_t lic)
        -:   75:{
        2:   76:	if (st == NULL)
    #####:   77:		return -1;
        -:   78:
        2:   79:	st->lic = lic & 0xFFF;
        -:   80:
        2:   81:	if (st->lic == 0)
    #####:   82:		st->lic_set = 0;
        -:   83:	else
        2:   84:		st->lic_set = 1;
        -:   85:
        2:   86:	return 0;
        -:   87:}
------------------
rds_set_lic:
        1:   74:rds_set_lic(struct rds_encoder_state *st, uint16_t lic)
        -:   75:{
        1:   76:	if (st == NULL)
    #####:   77:		return -1;
        -:   78:
        1:   79:	st->lic = lic & 0xFFF;
        -:   80:
        1:   81:	if (st->lic == 0)
    #####:   82:		st->lic_set = 0;
        -:   83:	else
        1:   84:		st->lic_set = 1;
        -:   85:
        1:   86:	return 0;
        -:   87:}
------------------
rds_set_lic:
        1:   74:rds_set_lic(struct rds_encoder_state *st, uint16_t lic)
        -:   75:{
        1:   76:	if (st == NULL)
    #####:   77:		return -1;
        -:   78:
        1:   79:	st->lic = lic & 0xFFF;
        -:   80:
        1:   81:	if (st->lic == 0)
    #####:   82:		st->lic_set = 0;
        -:   83:	else
        1:   84:		st->lic_set = 1;
        -:   85:
        1:   86:	return 0;
        -:   87:}
------------------
        -:   88:
        -:   89:uint8_t
      391:   90:rds_get_pty(const struct rds_encoder_state * st)
        -:   91:{
      391:   92:	return st->pty;
        -:   93:}
------------------
rds_get_pty:
      390:   90:rds_get_pty(const struct rds_encoder_state * st)
        -:   91:{
      390:   92:	return st->pty;
        -:   93:}
------------------
rds_get_pty:
        1:   90:rds_get_pty(const struct rds_encoder_state * st)
        -:   91:{
        1:   92:	return st->pty;
        -:   93:}
------------------
        -:   94:
        -:   95:int
       1*:   96:rds_set_pty(struct rds_encoder_state *st, uint8_t pty)
        -:   97:{
       1*:   98:	if (st == NULL)
    #####:   99:		return -1;
        -:  100:
       1*:  101:	if (pty <= 31)
       1*:  102:		st->pty = pty;
        -:  103:	else
    #####:  104:		return -1;
       1*:  105:	return 0;
        -:  106:}
------------------
rds_set_pty:
        1:   96:rds_set_pty(struct rds_encoder_state *st, uint8_t pty)
        -:   97:{
        1:   98:	if (st == NULL)
    #####:   99:		return -1;
        -:  100:
        1:  101:	if (pty <= 31)
        1:  102:		st->pty = pty;
        -:  103:	else
    #####:  104:		return -1;
        1:  105:	return 0;
        -:  106:}
------------------
rds_set_pty:
    #####:   96:rds_set_pty(struct rds_encoder_state *st, uint8_t pty)
        -:   97:{
    #####:   98:	if (st == NULL)
    #####:   99:		return -1;
        -:  100:
    #####:  101:	if (pty <= 31)
    #####:  102:		st->pty = pty;
        -:  103:	else
    #####:  104:		return -1;
    #####:  105:	return 0;
        -:  106:}
------------------
        -:  107:
        -:  108:uint8_t
      382:  109:rds_get_ta(const struct rds_encoder_state * st)
        -:  110:{
      382:  111:	if (st == NULL)
    #####:  112:		return 0;
      382:  113:	return st->ta;
        -:  114:}
------------------
rds_get_ta:
      381:  109:rds_get_ta(const struct rds_encoder_state * st)
        -:  110:{
      381:  111:	if (st == NULL)
    #####:  112:		return 0;
      381:  113:	return st->ta;
        -:  114:}
------------------
rds_get_ta:
        1:  109:rds_get_ta(const struct rds_encoder_state * st)
        -:  110:{
        1:  111:	if (st == NULL)
    #####:  112:		return 0;
        1:  113:	return st->ta;
        -:  114:}
------------------
        -:  115:
        -:  116:int
        5:  117:rds_set_ta(struct rds_encoder_state *st, uint8_t ta)
        -:  118:{
        5:  119:	if (st == NULL)
    #####:  120:		return -1;
        5:  121:	st->ta = ta & 1;
        5:  122:	return 0;
        -:  123:}
------------------
rds_set_ta:
        4:  117:rds_set_ta(struct rds_encoder_state *st, uint8_t ta)
        -:  118:{
        4:  119:	if (st == NULL)
    #####:  120:		return -1;
        4:  121:	st->ta = ta & 1;
        4:  122:	return 0;
        -:  123:}
------------------
rds_set_ta:
        1:  117:rds_set_ta(struct rds_encoder_state *st, uint8_t ta)
        -:  118:{
        1:  119:	if (st == NULL)
    #####:  120:		return -1;
        1:  121:	st->ta = ta & 1;
        1:  122:	return 0;
        -:  123:}
------------------
        -:  124:
        -:  125:uint8_t
      376:  126:rds_get_tp(const struct rds_encoder_state * st)
        -:  127:{
      376:  128:	if (st == NULL)
    #####:  129:		return 0;
      376:  130:	return st->tp;
        -:  131:}
------------------
rds_get_tp:
      375:  126:rds_get_tp(const struct rds_encoder_state * st)
        -:  127:{
      375:  128:	if (st == NULL)
    #####:  129:		return 0;
      375:  130:	return st->tp;
        -:  131:}
------------------
rds_get_tp:
        1:  126:rds_get_tp(const struct rds_encoder_state * st)
        -:  127:{
        1:  128:	if (st == NULL)
    #####:  129:		return 0;
        1:  130:	return st->tp;
        -:  131:}
------------------
        -:  132:
        -:  133:int
        5:  134:rds_set_tp(struct rds_encoder_state *st, uint8_t tp)
        -:  135:{
        5:  136:	if (st == NULL)
    #####:  137:		return -1;
        5:  138:	st->tp = tp & 1;
        5:  139:	return 0;
        -:  140:}
------------------
rds_set_tp:
        4:  134:rds_set_tp(struct rds_encoder_state *st, uint8_t tp)
        -:  135:{
        4:  136:	if (st == NULL)
    #####:  137:		return -1;
        4:  138:	st->tp = tp & 1;
        4:  139:	return 0;
        -:  140:}
------------------
rds_set_tp:
        1:  134:rds_set_tp(struct rds_encoder_state *st, uint8_t tp)
        -:  135:{
        1:  136:	if (st == NULL)
    #####:  137:		return -1;
        1:  138:	st->tp = tp & 1;
        1:  139:	return 0;
        -:  140:}
------------------
        -:  141:
        -:  142:uint8_t
      392:  143:rds_get_ms(const struct rds_encoder_state * st)
        -:  144:{
      392:  145:	if (st == NULL)
    #####:  146:		return 0;
      392:  147:	return st->ms;
        -:  148:}
------------------
rds_get_ms:
      391:  143:rds_get_ms(const struct rds_encoder_state * st)
        -:  144:{
      391:  145:	if (st == NULL)
    #####:  146:		return 0;
      391:  147:	return st->ms;
        -:  148:}
------------------
rds_get_ms:
        1:  143:rds_get_ms(const struct rds_encoder_state * st)
        -:  144:{
        1:  145:	if (st == NULL)
    #####:  146:		return 0;
        1:  147:	return st->ms;
        -:  148:}
------------------
        -:  149:
        -:  150:int
       1*:  151:rds_set_ms(struct rds_encoder_state *st, uint8_t ms)
        -:  152:{
       1*:  153:	if (st == NULL)
    #####:  154:		return -1;
       1*:  155:	st->ms = ms & 1;
       1*:  156:	return 0;
        -:  157:}
------------------
rds_set_ms:
    #####:  151:rds_set_ms(struct rds_encoder_state *st, uint8_t ms)
        -:  152:{
    #####:  153:	if (st == NULL)
    #####:  154:		return -1;
    #####:  155:	st->ms = ms & 1;
    #####:  156:	return 0;
        -:  157:}
------------------
rds_set_ms:
        1:  151:rds_set_ms(struct rds_encoder_state *st, uint8_t ms)
        -:  152:{
        1:  153:	if (st == NULL)
    #####:  154:		return -1;
        1:  155:	st->ms = ms & 1;
        1:  156:	return 0;
        -:  157:}
------------------
        -:  158:
        -:  159:uint8_t
     1542:  160:rds_get_di(const struct rds_encoder_state * st)
        -:  161:{
     1542:  162:	if (st == NULL)
    #####:  163:		return 0;
     1542:  164:	return st->di;
        -:  165:}
------------------
rds_get_di:
     1541:  160:rds_get_di(const struct rds_encoder_state * st)
        -:  161:{
     1541:  162:	if (st == NULL)
    #####:  163:		return 0;
     1541:  164:	return st->di;
        -:  165:}
------------------
rds_get_di:
        1:  160:rds_get_di(const struct rds_encoder_state * st)
        -:  161:{
        1:  162:	if (st == NULL)
    #####:  163:		return 0;
        1:  164:	return st->di;
        -:  165:}
------------------
        -:  166:
        -:  167:int
       11:  168:rds_set_di(struct rds_encoder_state *st, uint8_t di)
        -:  169:{
       11:  170:	if (st == NULL)
    #####:  171:		return -1;
        -:  172:
       11:  173:	st->di = di & 0xF;
       11:  174:	return 0;
        -:  175:}
------------------
rds_set_di:
       10:  168:rds_set_di(struct rds_encoder_state *st, uint8_t di)
        -:  169:{
       10:  170:	if (st == NULL)
    #####:  171:		return -1;
        -:  172:
       10:  173:	st->di = di & 0xF;
       10:  174:	return 0;
        -:  175:}
------------------
rds_set_di:
        1:  168:rds_set_di(struct rds_encoder_state *st, uint8_t di)
        -:  169:{
        1:  170:	if (st == NULL)
    #####:  171:		return -1;
        -:  172:
        1:  173:	st->di = di & 0xF;
        1:  174:	return 0;
        -:  175:}
------------------
        -:  176:
        -:  177:char *
      367:  178:rds_get_ps(const struct rds_encoder_state *st)
        -:  179:{
        -:  180:	static char ps[RDS_PS_LENGTH + 1];
      367:  181:	if (st == NULL)
    #####:  182:		return NULL;
      367:  183:	memset(ps, 0, RDS_PS_LENGTH + 1);
      367:  184:	memcpy(ps, st->ps, RDS_PS_LENGTH);
      367:  185:	return ps;
        -:  186:}
------------------
rds_get_ps:
      366:  178:rds_get_ps(const struct rds_encoder_state *st)
        -:  179:{
        -:  180:	static char ps[RDS_PS_LENGTH + 1];
      366:  181:	if (st == NULL)
    #####:  182:		return NULL;
      366:  183:	memset(ps, 0, RDS_PS_LENGTH + 1);
      366:  184:	memcpy(ps, st->ps, RDS_PS_LENGTH);
      366:  185:	return ps;
        -:  186:}
------------------
rds_get_ps:
        1:  178:rds_get_ps(const struct rds_encoder_state *st)
        -:  179:{
        -:  180:	static char ps[RDS_PS_LENGTH + 1];
        1:  181:	if (st == NULL)
    #####:  182:		return NULL;
        1:  183:	memset(ps, 0, RDS_PS_LENGTH + 1);
        1:  184:	memcpy(ps, st->ps, RDS_PS_LENGTH);
        1:  185:	return ps;
        -:  186:}
------------------
        -:  187:
        -:  188:int
       13:  189:rds_set_ps(struct rds_encoder_state *st, const char *ps)
        -:  190:{
       13:  191:	int pslen = 0;
       13:  192:	int i = 0;
        -:  193:
       13:  194:	if (st == NULL || ps == NULL)
    #####:  195:		return -1;
        -:  196:
       13:  197:	pslen = strnlen(ps, RDS_PS_LENGTH);
       13:  198:	if (!pslen || pslen > RDS_PS_LENGTH)
    #####:  199:		return -2;
        -:  200:
       13:  201:	memset(st->ps, 0, RDS_PS_LENGTH);
        -:  202:
       13:  203:	if (pslen == 0) {
    #####:  204:		st->ps_set = 0;
    #####:  205:		return 0;
        -:  206:	}
        -:  207:
       86:  208:	for (i = 0; i < pslen; i++) {
      73*:  209:		if ((ps[i] >= 0x20) || (ps[i] == 0x7F))
       73:  210:			st->ps[i] = ps[i];
        -:  211:		else
    #####:  212:			st->ps[i] = 0;
        -:  213:	}
       13:  214:	st->ps_set = 1;
       13:  215:	st->ps_idx = 0;
        -:  216:
       13:  217:	return 0;
        -:  218:}
------------------
rds_set_ps:
       12:  189:rds_set_ps(struct rds_encoder_state *st, const char *ps)
        -:  190:{
       12:  191:	int pslen = 0;
       12:  192:	int i = 0;
        -:  193:
       12:  194:	if (st == NULL || ps == NULL)
    #####:  195:		return -1;
        -:  196:
       12:  197:	pslen = strnlen(ps, RDS_PS_LENGTH);
       12:  198:	if (!pslen || pslen > RDS_PS_LENGTH)
    #####:  199:		return -2;
        -:  200:
       12:  201:	memset(st->ps, 0, RDS_PS_LENGTH);
        -:  202:
       12:  203:	if (pslen == 0) {
    #####:  204:		st->ps_set = 0;
    #####:  205:		return 0;
        -:  206:	}
        -:  207:
       82:  208:	for (i = 0; i < pslen; i++) {
      70*:  209:		if ((ps[i] >= 0x20) || (ps[i] == 0x7F))
       70:  210:			st->ps[i] = ps[i];
        -:  211:		else
    #####:  212:			st->ps[i] = 0;
        -:  213:	}
       12:  214:	st->ps_set = 1;
       12:  215:	st->ps_idx = 0;
        -:  216:
       12:  217:	return 0;
        -:  218:}
------------------
rds_set_ps:
        1:  189:rds_set_ps(struct rds_encoder_state *st, const char *ps)
        -:  190:{
        1:  191:	int pslen = 0;
        1:  192:	int i = 0;
        -:  193:
        1:  194:	if (st == NULL || ps == NULL)
    #####:  195:		return -1;
        -:  196:
        1:  197:	pslen = strnlen(ps, RDS_PS_LENGTH);
        1:  198:	if (!pslen || pslen > RDS_PS_LENGTH)
    #####:  199:		return -2;
        -:  200:
        1:  201:	memset(st->ps, 0, RDS_PS_LENGTH);
        -:  202:
        1:  203:	if (pslen == 0) {
    #####:  204:		st->ps_set = 0;
    #####:  205:		return 0;
        -:  206:	}
        -:  207:
        4:  208:	for (i = 0; i < pslen; i++) {
       3*:  209:		if ((ps[i] >= 0x20) || (ps[i] == 0x7F))
        3:  210:			st->ps[i] = ps[i];
        -:  211:		else
    #####:  212:			st->ps[i] = 0;
        -:  213:	}
        1:  214:	st->ps_set = 1;
        1:  215:	st->ps_idx = 0;
        -:  216:
        1:  217:	return 0;
        -:  218:}
------------------
        -:  219:
        -:  220:char *
      294:  221:rds_get_ptyn(const struct rds_encoder_state *st)
        -:  222:{
        -:  223:	static char ptyn[RDS_PTYN_LENGTH + 1];
      294:  224:	if (st == NULL || !st->ptyn_set)
    #####:  225:		return NULL;
        -:  226:
      294:  227:	memset(ptyn, 0, RDS_PTYN_LENGTH + 1);
      294:  228:	memcpy(ptyn, st->ptyn, RDS_PTYN_LENGTH);
        -:  229:
      294:  230:	return ptyn;
        -:  231:}
------------------
rds_get_ptyn:
      293:  221:rds_get_ptyn(const struct rds_encoder_state *st)
        -:  222:{
        -:  223:	static char ptyn[RDS_PTYN_LENGTH + 1];
      293:  224:	if (st == NULL || !st->ptyn_set)
    #####:  225:		return NULL;
        -:  226:
      293:  227:	memset(ptyn, 0, RDS_PTYN_LENGTH + 1);
      293:  228:	memcpy(ptyn, st->ptyn, RDS_PTYN_LENGTH);
        -:  229:
      293:  230:	return ptyn;
        -:  231:}
------------------
rds_get_ptyn:
        1:  221:rds_get_ptyn(const struct rds_encoder_state *st)
        -:  222:{
        -:  223:	static char ptyn[RDS_PTYN_LENGTH + 1];
        1:  224:	if (st == NULL || !st->ptyn_set)
    #####:  225:		return NULL;
        -:  226:
        1:  227:	memset(ptyn, 0, RDS_PTYN_LENGTH + 1);
        1:  228:	memcpy(ptyn, st->ptyn, RDS_PTYN_LENGTH);
        -:  229:
        1:  230:	return ptyn;
        -:  231:}
------------------
        -:  232:
        -:  233:int
        2:  234:rds_set_ptyn(struct rds_encoder_state *st, const char *ptyn)
        -:  235:{
        2:  236:	int ptynlen = 0;
        2:  237:	int i = 0;
        -:  238:
        2:  239:	if (st == NULL || ptyn == NULL)
    #####:  240:		return -1;
        -:  241:
        2:  242:	ptynlen = strnlen(ptyn, RDS_PTYN_LENGTH);
        2:  243:	if (ptynlen > RDS_PTYN_LENGTH)
    #####:  244:		return -1;
        -:  245:
        2:  246:	if (ptynlen == 0) {
    #####:  247:		st->ptyn_set = 0;
    #####:  248:		memset(st->ptyn, 0, RDS_PTYN_LENGTH);
    #####:  249:		return 0;
        -:  250:	}
        -:  251:
        -:  252:	/* Flip A/B flag to flush PTYN buffer
        -:  253:	 * on receiver */
        2:  254:	if (st->ptyn_set)
       1*:  255:		st->ptyn_flush = st->ptyn_flush ? 0 : 1;
        -:  256:
        2:  257:	memset(st->ptyn, 0, RDS_PTYN_LENGTH);
        9:  258:	for (i = 0; i < ptynlen; i++) {
       7*:  259:		if ((ptyn[i] >= 0x20) || (ptyn[i] == 0x7F))
        7:  260:			st->ptyn[i] = ptyn[i];
        -:  261:		else
    #####:  262:			st->ptyn[i] = 0;
        -:  263:	}
        2:  264:	st->ptyn_set = 1;
        2:  265:	st->ptyn_idx = 0;
        -:  266:
        2:  267:	return 0;
        -:  268:}
------------------
rds_set_ptyn:
        1:  234:rds_set_ptyn(struct rds_encoder_state *st, const char *ptyn)
        -:  235:{
        1:  236:	int ptynlen = 0;
        1:  237:	int i = 0;
        -:  238:
        1:  239:	if (st == NULL || ptyn == NULL)
    #####:  240:		return -1;
        -:  241:
        1:  242:	ptynlen = strnlen(ptyn, RDS_PTYN_LENGTH);
        1:  243:	if (ptynlen > RDS_PTYN_LENGTH)
    #####:  244:		return -1;
        -:  245:
        1:  246:	if (ptynlen == 0) {
    #####:  247:		st->ptyn_set = 0;
    #####:  248:		memset(st->ptyn, 0, RDS_PTYN_LENGTH);
    #####:  249:		return 0;
        -:  250:	}
        -:  251:
        -:  252:	/* Flip A/B flag to flush PTYN buffer
        -:  253:	 * on receiver */
        1:  254:	if (st->ptyn_set)
    #####:  255:		st->ptyn_flush = st->ptyn_flush ? 0 : 1;
        -:  256:
        1:  257:	memset(st->ptyn, 0, RDS_PTYN_LENGTH);
        4:  258:	for (i = 0; i < ptynlen; i++) {
       3*:  259:		if ((ptyn[i] >= 0x20) || (ptyn[i] == 0x7F))
        3:  260:			st->ptyn[i] = ptyn[i];
        -:  261:		else
    #####:  262:			st->ptyn[i] = 0;
        -:  263:	}
        1:  264:	st->ptyn_set = 1;
        1:  265:	st->ptyn_idx = 0;
        -:  266:
        1:  267:	return 0;
        -:  268:}
------------------
rds_set_ptyn:
        1:  234:rds_set_ptyn(struct rds_encoder_state *st, const char *ptyn)
        -:  235:{
        1:  236:	int ptynlen = 0;
        1:  237:	int i = 0;
        -:  238:
        1:  239:	if (st == NULL || ptyn == NULL)
    #####:  240:		return -1;
        -:  241:
        1:  242:	ptynlen = strnlen(ptyn, RDS_PTYN_LENGTH);
        1:  243:	if (ptynlen > RDS_PTYN_LENGTH)
    #####:  244:		return -1;
        -:  245:
        1:  246:	if (ptynlen == 0) {
    #####:  247:		st->ptyn_set = 0;
    #####:  248:		memset(st->ptyn, 0, RDS_PTYN_LENGTH);
    #####:  249:		return 0;
        -:  250:	}
        -:  251:
        -:  252:	/* Flip A/B flag to flush PTYN buffer
        -:  253:	 * on receiver */
        1:  254:	if (st->ptyn_set)
        1:  255:		st->ptyn_flush = st->ptyn_flush ? 0 : 1;
        -:  256:
        1:  257:	memset(st->ptyn, 0, RDS_PTYN_LENGTH);
        5:  258:	for (i = 0; i < ptynlen; i++) {
       4*:  259:		if ((ptyn[i] >= 0x20) || (ptyn[i] == 0x7F))
        4:  260:			st->ptyn[i] = ptyn[i];
        -:  261:		else
    #####:  262:			st->ptyn[i] = 0;
        -:  263:	}
        1:  264:	st->ptyn_set = 1;
        1:  265:	st->ptyn_idx = 0;
        -:  266:
        1:  267:	return 0;
        -:  268:}
------------------
        -:  269:
        -:  270:char *
      307:  271:rds_get_rt(const struct rds_encoder_state *st)
        -:  272:{
        -:  273:	static char rt[RDS_RT_LENGTH + 1];
        -:  274:
      307:  275:	if (!st->rt_set)
    #####:  276:		return NULL;
        -:  277:
      307:  278:	memset(rt, 0, RDS_RT_LENGTH + 1);
      307:  279:	memcpy(rt, st->rt, RDS_RT_LENGTH);
        -:  280:
      307:  281:	return rt;
        -:  282:}
------------------
rds_get_rt:
      306:  271:rds_get_rt(const struct rds_encoder_state *st)
        -:  272:{
        -:  273:	static char rt[RDS_RT_LENGTH + 1];
        -:  274:
      306:  275:	if (!st->rt_set)
    #####:  276:		return NULL;
        -:  277:
      306:  278:	memset(rt, 0, RDS_RT_LENGTH + 1);
      306:  279:	memcpy(rt, st->rt, RDS_RT_LENGTH);
        -:  280:
      306:  281:	return rt;
        -:  282:}
------------------
rds_get_rt:
        1:  271:rds_get_rt(const struct rds_encoder_state *st)
        -:  272:{
        -:  273:	static char rt[RDS_RT_LENGTH + 1];
        -:  274:
        1:  275:	if (!st->rt_set)
    #####:  276:		return NULL;
        -:  277:
        1:  278:	memset(rt, 0, RDS_RT_LENGTH + 1);
        1:  279:	memcpy(rt, st->rt, RDS_RT_LENGTH);
        -:  280:
        1:  281:	return rt;
        -:  282:}
------------------
        -:  283:
        -:  284:int
       13:  285:rds_set_rt(struct rds_encoder_state *st, const char *rt, int flush)
        -:  286:{
       13:  287:	int rtlen = 0;
       13:  288:	int i = 0;
        -:  289:
       13:  290:	if (st == NULL || rt == NULL)
    #####:  291:		return -1;
        -:  292:
       13:  293:	rtlen = strnlen(rt, RDS_RT_LENGTH);
       13:  294:	if (rtlen > RDS_RT_LENGTH)
    #####:  295:		return -1;
        -:  296:
       13:  297:	if (rtlen == 0) {
    #####:  298:		st->rt_set = 0;
    #####:  299:		memset(st->rt, 0, RDS_RT_LENGTH);
    #####:  300:		return 0;
        -:  301:	}
        -:  302:
        -:  303:	/* Flip A/B flag to flush RT buffer
        -:  304:	 * on receiver */
       13:  305:	if (flush && st->rt_set)
       12:  306:		st->rt_flush = st->rt_flush ? 0 : 1;
        -:  307:
       13:  308:	memset(st->rt, 0, RDS_RT_LENGTH);
      360:  309:	for (i = 0; i < rtlen; i++) {
     347*:  310:		if (((rt[i] < 0x20) &&
    #####:  311:		     ((rt[i] != RDS_RT_CR) ||
    #####:  312:		      (rt[i] != RDS_RT_LF) ||
    #####:  313:		      (rt[i] != RDS_RT_END_OF_HEADLINE) ||
     347*:  314:		      (rt[i] != RDS_RT_SOFT_HYPHEN))) || (rt[i] == 0x7F))
    #####:  315:			st->rt[i] = 0;
        -:  316:		else
      347:  317:			st->rt[i] = rt[i];
        -:  318:	}
        -:  319:
       34:  320:	while (i % 4 && i < RDS_RT_LENGTH - 1) {
       21:  321:		st->rt[i] = 0x20;
       21:  322:		i++;
        -:  323:	}
        -:  324:
        -:  325:	/* According to the standard the RT message
        -:  326:	 * should end with a CR character but some
        -:  327:	 * receivers display a '-' instead
        -:  328:	 st->rt[i - 1] = RDS_RT_CR;
        -:  329:	 */
        -:  330:
       13:  331:	st->rt_segments = i / 4;
        -:  332:
       13:  333:	st->rt_set = 1;
       13:  334:	st->rt_idx = 0;
        -:  335:
       13:  336:	return 0;
        -:  337:}
